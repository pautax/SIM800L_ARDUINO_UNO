<!DOCTYPE html>
<html prefix="og: http://ogp.me/ns#" lang="en-GB"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8"><meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1"><link rel="profile" href="https://gmpg.org/xfn/11"><title>In-Depth: Send Receive SMS &amp; Call with SIM800L GSM Module &amp; Arduino</title> <script async="" src="In-Depth%20%20Send%20Receive%20SMS%20&amp;%20Call%20with%20SIM800L%20GSM%20Module%20&amp;%20Arduino_files/async-ads.js"></script><script type="text/javascript" async="" src="In-Depth%20%20Send%20Receive%20SMS%20&amp;%20Call%20with%20SIM800L%20GSM%20Module%20&amp;%20Arduino_files/cse.js"></script><script type="application/ld+json">{"@context":"http:\/\/schema.org","publisher":{"@type":"Organization","name":"Last Minute Engineers","logo":{"@type":"ImageObject","url":"https:\/\/lastminuteengineers.com\/wp-content\/themes\/twentynineteen-child\/logo\/LastMinuteEngineers.png","height":90,"width":168}},"@type":"BlogPosting","mainEntityOfPage":"https:\/\/lastminuteengineers.com\/sim800l-gsm-module-arduino-tutorial\/","headline":"Send Receive SMS &#038; Call with SIM800L GSM Module &#038; Arduino","datePublished":"2018-08-01T18:07:07+00:00","dateModified":"2019-03-30T08:47:30+00:00","author":{"@type":"Person","name":"Last Minute Engineers"},"image":{"@type":"ImageObject","url":"https:\/\/lastminuteengineers.com\/wp-content\/uploads\/2018\/07\/Arduino-Project-Working-Interfacing-SIM800L-GSM-Module-Sending-Receiving-SMS-Making-Call.jpg","width":763,"height":436}}</script> <!-- This site is optimized with the Yoast SEO plugin v11.0 - https://yoast.com/wordpress/plugins/seo/ --><meta name="description" content="Learn about SIM800L GSM GPRS Module along with its Pinout, Antenna &amp; Power Supply Selection, Wiring, AT Commands &amp; Code for Sending &amp; Receiving Call &amp; SMS."><link rel="canonical" href="https://lastminuteengineers.com/sim800l-gsm-module-arduino-tutorial/"><meta property="og:locale" content="en_GB"><meta property="og:type" content="article"><meta property="og:title" content="In-Depth: Send Receive SMS &amp; Call with SIM800L GSM Module &amp; Arduino"><meta property="og:description" content="Learn about SIM800L GSM GPRS Module along with its Pinout, Antenna &amp; Power Supply Selection, Wiring, AT Commands &amp; Code for Sending &amp; Receiving Call &amp; SMS."><meta property="og:url" content="https://lastminuteengineers.com/sim800l-gsm-module-arduino-tutorial/"><meta property="og:site_name" content="Last Minute Engineers"><meta property="article:section" content="Arduino Projects"><meta property="article:published_time" content="2018-08-01T18:07:07+00:00"><meta property="article:modified_time" content="2019-03-30T08:47:30+00:00"><meta property="og:updated_time" content="2019-03-30T08:47:30+00:00"><meta property="og:image" content="https://lastminuteengineers.com/wp-content/uploads/2018/07/Arduino-Project-Working-Interfacing-SIM800L-GSM-Module-Sending-Receiving-SMS-Making-Call.jpg"><meta property="og:image:secure_url" content="https://lastminuteengineers.com/wp-content/uploads/2018/07/Arduino-Project-Working-Interfacing-SIM800L-GSM-Module-Sending-Receiving-SMS-Making-Call.jpg"><meta property="og:image:width" content="763"><meta property="og:image:height" content="436"><meta name="twitter:card" content="summary_large_image"><meta name="twitter:description" content="Learn about SIM800L GSM GPRS Module along with its Pinout, Antenna &amp; Power Supply Selection, Wiring, AT Commands &amp; Code for Sending &amp; Receiving Call &amp; SMS."><meta name="twitter:title" content="In-Depth: Send Receive SMS &amp; Call with SIM800L GSM Module &amp; Arduino"><meta name="twitter:image" content="https://lastminuteengineers.com/wp-content/uploads/2018/07/Arduino-Project-Working-Interfacing-SIM800L-GSM-Module-Sending-Receiving-SMS-Making-Call.jpg"> <!-- / Yoast SEO plugin. --><link rel="dns-prefetch" href="https://ajax.googleapis.com/"><link rel="dns-prefetch" href="https://s.w.org/"><link rel="alternate" type="application/rss+xml" title="Last Minute Engineers » Feed" href="https://lastminuteengineers.com/feed/"><link rel="alternate" type="application/rss+xml" title="Last Minute Engineers » Comments Feed" href="https://lastminuteengineers.com/comments/feed/"><link rel="alternate" type="application/rss+xml" title="Last Minute Engineers » Send Receive SMS &amp; Call with SIM800L GSM Module &amp; Arduino Comments Feed" href="https://lastminuteengineers.com/sim800l-gsm-module-arduino-tutorial/feed/"><link rel="stylesheet" id="twentynineteen-style-css" href="In-Depth%20%20Send%20Receive%20SMS%20&amp;%20Call%20with%20SIM800L%20GSM%20Module%20&amp;%20Arduino_files/style.css" type="text/css" media="all"><link rel="https://api.w.org/" href="https://lastminuteengineers.com/wp-json/"><link rel="EditURI" type="application/rsd+xml" title="RSD" href="https://lastminuteengineers.com/xmlrpc.php?rsd"><link rel="wlwmanifest" type="application/wlwmanifest+xml" href="https://lastminuteengineers.com/wp-includes/wlwmanifest.xml"><meta name="generator" content="WordPress 5.2.3"><link rel="shortlink" href="https://lastminuteengineers.com/?p=629"><link rel="alternate" type="application/json+oembed" href="https://lastminuteengineers.com/wp-json/oembed/1.0/embed?url=https%3A%2F%2Flastminuteengineers.com%2Fsim800l-gsm-module-arduino-tutorial%2F"><link rel="alternate" type="text/xml+oembed" href="https://lastminuteengineers.com/wp-json/oembed/1.0/embed?url=https%3A%2F%2Flastminuteengineers.com%2Fsim800l-gsm-module-arduino-tutorial%2F&amp;format=xml"><link rel="icon" type="image/png" href="https://lastminuteengineers.com/wp-content/uploads/logo/Favicon.png"> <script type="text/javascript">window.onload = function(){jQuery.noConflict();}</script><script async="" src="In-Depth%20%20Send%20Receive%20SMS%20&amp;%20Call%20with%20SIM800L%20GSM%20Module%20&amp;%20Arduino_files/js"></script> <script>window.dataLayer = window.dataLayer || [];
			  function gtag(){dataLayer.push(arguments);}
			  gtag('js', new Date());

			  gtag('config', 'UA-121719862-1');</script> <script async="" src="In-Depth%20%20Send%20Receive%20SMS%20&amp;%20Call%20with%20SIM800L%20GSM%20Module%20&amp;%20Arduino_files/adsbygoogle.js"></script> <script>(adsbygoogle = window.adsbygoogle || []).push({
					  google_ad_client: "ca-pub-2705735538096223",
					  enable_page_level_ads: true
				 });</script><link rel="pingback" href="https://lastminuteengineers.com/xmlrpc.php"><link rel="amphtml" href="https://lastminuteengineers.com/sim800l-gsm-module-arduino-tutorial/amp/"><script src="In-Depth%20%20Send%20Receive%20SMS%20&amp;%20Call%20with%20SIM800L%20GSM%20Module%20&amp;%20Arduino_files/cse_element__en.js" type="text/javascript"></script><link type="text/css" rel="stylesheet" href="In-Depth%20%20Send%20Receive%20SMS%20&amp;%20Call%20with%20SIM800L%20GSM%20Module%20&amp;%20Arduino_files/defaulten.css"><link type="text/css" rel="stylesheet" href="In-Depth%20%20Send%20Receive%20SMS%20&amp;%20Call%20with%20SIM800L%20GSM%20Module%20&amp;%20Arduino_files/default.css"><style type="text/css">.gsc-control-cse{font-family:arial, sans-serif}.gsc-control-cse .gsc-table-result{font-family:arial, sans-serif}.gsc-refinementsGradient{background:linear-gradient(to left,rgba(255,255,255,1),rgba(255,255,255,0))}.gsc-control-cse{border-color:#FFFFFF;background-color:#F7F7F7}input.gsc-input,.gsc-input-box,.gsc-input-box-hover,.gsc-input-box-focus{border-color:#F7F7F7}.gsc-search-button-v2,.gsc-search-button-v2:hover,.gsc-search-button-v2:focus{border-color:#F7F7F7;background-color:#F7F7F7;background-image:none;filter:none}.gsc-search-button-v2 svg{fill:#777777}.gsc-tabHeader.gsc-tabhActive,.gsc-refinementHeader.gsc-refinementhActive{color:#1A73E8;border-color:#1A73E8;background-color:#FFFFFF}.gsc-tabHeader.gsc-tabhInactive,.gsc-refinementHeader.gsc-refinementhInactive{color:#666666;border-color:#666666;background-color:#FFFFFF}.gsc-webResult.gsc-result,.gsc-results .gsc-imageResult{border-color:#FFFFFF;background-color:#FFFFFF}.gsc-webResult.gsc-result:hover,.gsc-imageResult:hover{border-color:#FFFFFF;background-color:#FFFFFF}.gs-webResult.gs-result a.gs-title:link,.gs-webResult.gs-result a.gs-title:link b,.gs-imageResult a.gs-title:link,.gs-imageResult a.gs-title:link b{color:#1155CC}.gs-webResult.gs-result a.gs-title:visited,.gs-webResult.gs-result a.gs-title:visited b,.gs-imageResult a.gs-title:visited,.gs-imageResult a.gs-title:visited b{color:#1155CC}.gs-webResult.gs-result a.gs-title:hover,.gs-webResult.gs-result a.gs-title:hover b,.gs-imageResult a.gs-title:hover,.gs-imageResult a.gs-title:hover b{color:#1155CC}.gs-webResult.gs-result a.gs-title:active,.gs-webResult.gs-result a.gs-title:active b,.gs-imageResult a.gs-title:active,.gs-imageResult a.gs-title:active b{color:#1155CC}.gsc-cursor-page{color:#1155CC}a.gsc-trailing-more-results:link{color:#1155CC}.gs-webResult .gs-snippet,.gs-imageResult .gs-snippet,.gs-fileFormatType{color:#333333}.gs-webResult div.gs-visibleUrl,.gs-imageResult div.gs-visibleUrl{color:#009933}.gs-webResult div.gs-visibleUrl-short{color:#009933}.gs-webResult div.gs-visibleUrl-short{display:none}.gs-webResult div.gs-visibleUrl-long{display:block}.gs-promotion div.gs-visibleUrl-short{display:none}.gs-promotion div.gs-visibleUrl-long{display:block}.gsc-cursor-box{border-color:#FFFFFF}.gsc-results .gsc-cursor-box .gsc-cursor-page{border-color:#666666;background-color:#FFFFFF;color:#666666}.gsc-results .gsc-cursor-box .gsc-cursor-current-page{border-color:#1A73E8;background-color:#FFFFFF;color:#1A73E8}.gsc-webResult.gsc-result.gsc-promotion{border-color:#F6F6F6;background-color:#F6F6F6}.gsc-completion-title{color:#1155CC}.gsc-completion-snippet{color:#333333}.gs-promotion a.gs-title:link,.gs-promotion a.gs-title:link *,.gs-promotion .gs-snippet a:link{color:#1155CC}.gs-promotion a.gs-title:visited,.gs-promotion a.gs-title:visited *,.gs-promotion .gs-snippet a:visited{color:#1155CC}.gs-promotion a.gs-title:hover,.gs-promotion a.gs-title:hover *,.gs-promotion .gs-snippet a:hover{color:#1155CC}.gs-promotion a.gs-title:active,.gs-promotion a.gs-title:active *,.gs-promotion .gs-snippet a:active{color:#1155CC}.gs-promotion .gs-snippet,.gs-promotion .gs-title .gs-promotion-title-right,.gs-promotion .gs-title .gs-promotion-title-right *{color:#333333}.gs-promotion .gs-visibleUrl,.gs-promotion .gs-visibleUrl-short{color:#009933}.gcsc-find-more-on-google{color:#1155CC}.gcsc-find-more-on-google-magnifier{fill:#1155CC}</style><style type="text/css">.gscb_a{display:inline-block;font:27px/13px arial,sans-serif}.gsst_a .gscb_a{color:#a1b9ed;cursor:pointer}.gsst_a:hover .gscb_a,.gsst_a:focus .gscb_a{color:#36c}.gsst_a{display:inline-block}.gsst_a{cursor:pointer;padding:0 4px}.gsst_a:hover{text-decoration:none!important}.gsst_b{font-size:16px;padding:0 2px;position:relative;user-select:none;-moz-user-select:none;white-space:nowrap}.gsst_e{vertical-align:middle;opacity:0.55;}.gsst_a:hover .gsst_e,.gsst_a:focus .gsst_e{opacity:0.72;}.gsst_a:active .gsst_e{opacity:1;}.gsst_f{background:white;text-align:left}.gsst_g{background-color:white;border:1px solid #ccc;border-top-color:#d9d9d9;box-shadow:0 2px 4px rgba(0,0,0,0.2);-moz-box-shadow:0 2px 4px rgba(0,0,0,0.2);margin:-1px -3px;padding:0 6px}.gsst_h{background-color:white;height:1px;margin-bottom:-1px;position:relative;top:-1px}.gsib_a{width:100%;padding:4px 6px 0}.gsib_a,.gsib_b{vertical-align:top}.gssb_c{border:0;position:absolute;z-index:989}.gssb_e{border:1px solid #ccc;border-top-color:#d9d9d9;box-shadow:0 2px 4px rgba(0,0,0,0.2);-moz-box-shadow:0 2px 4px rgba(0,0,0,0.2);cursor:default}.gssb_f{visibility:hidden;white-space:nowrap}.gssb_k{border:0;display:block;position:absolute;top:0;z-index:988}.gsdd_a{border:none!important}.gsq_a{padding:0}.gssb_a{padding:0 7px}.gssb_a,.gssb_a td{white-space:nowrap;overflow:hidden;line-height:22px}#gssb_b{font-size:11px;color:#36c;text-decoration:none}#gssb_b:hover{font-size:11px;color:#36c;text-decoration:underline}.gssb_g{text-align:center;padding:8px 0 7px;position:relative}.gssb_h{font-size:15px;height:28px;margin:0.2em}.gssb_i{background:#eee}.gss_ifl{visibility:hidden;padding-left:5px}.gssb_i .gss_ifl{visibility:visible}a.gssb_j{font-size:13px;color:#36c;text-decoration:none;line-height:100%}a.gssb_j:hover{text-decoration:underline}.gssb_l{height:1px;background-color:#e5e5e5}.gssb_m{color:#000;background:#fff}.gssb_a{padding:0 9px}.gsib_a{padding:5px 9px 4px 9px}.gscb_a{line-height:27px}.gssb_e{border:0}.gssb_l{margin:5px 0}input.gsc-input::-webkit-input-placeholder{font-size:14px}input.gsc-input:-moz-placeholder{font-size:14px}input.gsc-input::-moz-placeholder{font-size:14px}input.gsc-input:-ms-input-placeholder{font-size:14px}input.gsc-input:focus::-webkit-input-placeholder{color:transparent}input.gsc-input:focus:-moz-placeholder{color:transparent}input.gsc-input:focus::-moz-placeholder{color:transparent}input.gsc-input:focus:-ms-input-placeholder{color:transparent}.gssb_c .gsc-completion-container{position:static}.gssb_c{z-index:5000}.gsc-completion-container table{background:transparent;font-size:inherit;font-family:inherit}.gssb_c > tbody > tr,.gssb_c > tbody > tr > td,.gssb_d,.gssb_d > tbody > tr,.gssb_d > tbody > tr > td,.gssb_e,.gssb_e > tbody > tr,.gssb_e > tbody > tr > td{padding:0;margin:0;border:0}.gssb_a table,.gssb_a table tr,.gssb_a table tr td{padding:0;margin:0;border:0}</style></head><body class="post-template-default single single-post postid-629 single-format-standard wp-embed-responsive singular image-filters-enabled"><div id="page" class="site"><header id="masthead" class="site-header"><div class="container"><div class="header-wrapper"><div class="sitelogo"> <a href="https://lastminuteengineers.com/" rel="home"> <svg xmlns="http://www.w3.org/2000/svg" width="166.5" height="54" viewBox="9.25 3 166.5 54"><path fill="#fbc531" d="M22.57 32.57L36.2 8.6l-25.9 25.46-.05.05a3.45 3.45 0 0 0-1 2.44A3.46 3.46 0 0 0 12.7 40h17l2.24-7.43h-9.38z"></path><path fill="#4285F4" d="M41.84 27.43L28.19 51.41 54.1 25.95l.05-.04a3.45 3.45 0 0 0 1-2.44A3.46 3.46 0 0 0 51.7 20h-17l-2.24 7.42h9.38z"></path><path fill="#454545" d="M64.85 48.56l3.37-15.6h9.17l-.65 2.89h-6.01L70.08 39h5.3l-.62 2.83h-5.3l-.82 3.83h6.48l-.65 2.9h-9.62zm21.51 0a86.81 86.81 0 0 0-1.9-5.31 55.1 55.1 0 0 0-2.25-5.02l-2.23 10.33h-3.1l3.36-15.6h2.41c.31.53.65 1.15 1 1.86a74.18 74.18 0 0 1 1.1 2.31 102.72 102.72 0 0 1 2.22 5.22l2-9.38h3.14l-3.38 15.6h-2.37zm12.72-2.7a7.55 7.55 0 0 0 1.32-.11l1.17-5.42h3.16l-1.7 7.8a9.2 9.2 0 0 1-1.64.49c-.72.15-1.63.23-2.74.23-.94 0-1.77-.15-2.5-.46a4.82 4.82 0 0 1-1.81-1.32 5.6 5.6 0 0 1-1.1-2.06 9.59 9.59 0 0 1-.36-2.75c0-1.17.19-2.33.56-3.49a9.53 9.53 0 0 1 1.65-3.09c.73-.9 1.63-1.65 2.71-2.22a7.86 7.86 0 0 1 5.78-.54c.73.21 1.38.53 1.96.95l-1.14 2.72a5.37 5.37 0 0 0-1.5-.74 5.28 5.28 0 0 0-1.57-.25c-.83 0-1.56.17-2.2.52a4.98 4.98 0 0 0-1.63 1.4 6.46 6.46 0 0 0-1.01 2.06 8.73 8.73 0 0 0-.35 2.48c0 1.32.25 2.28.74 2.9.5.6 1.23.9 2.2.9zm10.12-12.9h3.16l-3.38 15.6h-3.14l3.36-15.6zm12.44 15.6a87.5 87.5 0 0 0-1.9-5.31 54.83 54.83 0 0 0-2.25-5.02l-2.23 10.33h-3.1l3.36-15.6h2.41c.31.53.65 1.15 1 1.86.36.72.73 1.48 1.1 2.31a99.27 99.27 0 0 1 2.21 5.22l2-9.38h3.15L124 48.56h-2.37zm5.55 0l3.36-15.6h9.17l-.64 2.89h-6.02L132.4 39h5.3l-.62 2.83h-5.3l-.82 3.83h6.48l-.65 2.9h-9.61zm12.03 0l3.36-15.6h9.17l-.65 2.89h-6.01l-.65 3.15h5.3l-.62 2.83h-5.3l-.82 3.83h6.48l-.65 2.9h-9.61zm19.34-15.77c.9 0 1.69.12 2.37.36.67.24 1.23.56 1.68.96.44.4.77.89.99 1.43a4.67 4.67 0 0 1 .32 1.72c0 .5-.05.99-.15 1.47a4.16 4.16 0 0 1-.57 1.37 4.91 4.91 0 0 1-1.1 1.2 6.2 6.2 0 0 1-1.8.94c.38.78.77 1.72 1.16 2.83a59.42 59.42 0 0 1 1.13 3.49h-3.38a282.28 282.28 0 0 0-.95-3.07 15.43 15.43 0 0 0-1.06-2.62h-1.58l-1.23 5.69h-3.14l3.3-15.37a19.5 19.5 0 0 1 2.12-.32 22.12 22.12 0 0 1 1.89-.08zm-.1 2.97a15.37 15.37 0 0 0-1.32.06l-.91 4.28h1.07c.65 0 1.2-.07 1.64-.2.45-.14.8-.32 1.07-.54.27-.23.46-.49.58-.78a2.43 2.43 0 0 0 .07-1.62 1.46 1.46 0 0 0-.36-.62 1.83 1.83 0 0 0-.71-.43 3.5 3.5 0 0 0-1.13-.15zm10 10.19c.31 0 .62-.02.93-.08a2.57 2.57 0 0 0 .83-.28c.24-.14.44-.33.6-.57.15-.25.23-.57.23-.96 0-.3-.07-.56-.22-.77a2.77 2.77 0 0 0-.57-.6 5.37 5.37 0 0 0-.77-.5 12.7 12.7 0 0 1-.85-.49 11.58 11.58 0 0 1-1.03-.77 4.47 4.47 0 0 1-.83-.9 4.53 4.53 0 0 1-.55-1.13 4.61 4.61 0 0 1-.2-1.43c0-.7.12-1.33.35-1.93a4.2 4.2 0 0 1 1.06-1.54 4.94 4.94 0 0 1 1.75-1.02 7.44 7.44 0 0 1 4.86.05 6.31 6.31 0 0 1 1.7.88l-1.31 2.6a4.56 4.56 0 0 0-2.82-1.02c-.31 0-.6.03-.89.09a2.16 2.16 0 0 0-.75.3 1.6 1.6 0 0 0-.52.55c-.13.23-.19.5-.19.84 0 .3.05.55.15.75.1.2.24.38.4.53.16.15.35.28.56.4l.7.39c.41.24.81.5 1.2.76.4.27.74.59 1.04.94a4.2 4.2 0 0 1 .97 2.8c0 .85-.14 1.6-.42 2.23a4.28 4.28 0 0 1-1.2 1.57 5.08 5.08 0 0 1-1.83.94c-.71.2-1.5.3-2.36.3a7.7 7.7 0 0 1-1.59-.16 10.5 10.5 0 0 1-1.34-.37 6.61 6.61 0 0 1-1.03-.46 6.13 6.13 0 0 1-.7-.45l1.34-2.68a6.6 6.6 0 0 0 2.29 1.07c.32.08.66.12 1 .12zM77.48 24.61l-.35 1.67h-7.49L72.72 12h1.8l-2.73 12.6h5.69zm6.98 1.79a8.6 8.6 0 0 1-.18-.5 4.48 4.48 0 0 1-.15-.6 5.6 5.6 0 0 1-1.1.83c-.45.28-1.01.41-1.68.41-.54 0-1.01-.1-1.4-.28a2.52 2.52 0 0 1-.95-.8 3.49 3.49 0 0 1-.55-1.22 6.35 6.35 0 0 1-.17-1.54c0-.92.13-1.82.41-2.7a7.1 7.1 0 0 1 1.25-2.35 6.33 6.33 0 0 1 2.1-1.67 6.45 6.45 0 0 1 4.1-.51c.45.08.84.22 1.16.41l-1.43 6.47-.16.9c-.04.29-.06.6-.06.9a6.12 6.12 0 0 0 .33 2l-1.52.25zm-2.76-1.48c.52 0 .97-.13 1.34-.37.37-.25.69-.54.96-.87a10.57 10.57 0 0 1 .19-1.5l1.1-5.1A1.1 1.1 0 0 0 85 17a4.24 4.24 0 0 0-.38-.02c-.7 0-1.34.15-1.9.46a4.65 4.65 0 0 0-1.46 1.2 5.45 5.45 0 0 0-.93 1.75A6.73 6.73 0 0 0 80 22.5c0 .29.02.58.07.87.05.3.14.56.27.79.13.22.3.4.52.55.22.14.5.22.84.22zm8.36.02c.26 0 .52-.03.79-.09.26-.05.5-.14.7-.26.2-.13.37-.3.5-.5.13-.22.2-.48.2-.8 0-.2-.03-.39-.1-.55a1.34 1.34 0 0 0-.3-.44 2.95 2.95 0 0 0-.5-.4c-.2-.13-.45-.28-.74-.44a10.8 10.8 0 0 1-.77-.46 2.82 2.82 0 0 1-.62-.53c-.18-.2-.32-.45-.42-.73s-.15-.62-.15-1.02c0-1.03.33-1.86 1-2.48.67-.63 1.64-.94 2.91-.94a5.65 5.65 0 0 1 2.5.56l-.65 1.56a3.86 3.86 0 0 0-.83-.35 4.12 4.12 0 0 0-1.28-.18c-.23 0-.47.02-.7.08a1.9 1.9 0 0 0-.64.28c-.2.13-.35.3-.46.51a1.58 1.58 0 0 0-.18.77c0 .37.13.68.39.92s.65.49 1.17.75c.32.17.6.33.86.5.25.18.47.37.65.58.18.22.31.47.4.75.1.3.14.64.14 1.03 0 .58-.1 1.09-.3 1.53a2.95 2.95 0 0 1-.82 1.09 3.56 3.56 0 0 1-1.25.65 5.48 5.48 0 0 1-1.57.21 6.48 6.48 0 0 1-2.03-.3 3.9 3.9 0 0 1-.63-.26 5.42 5.42 0 0 1-.38-.22l.66-1.56a5.16 5.16 0 0 0 .92.45 4.94 4.94 0 0 0 1.53.29zm8.22 1.62c-.92 0-1.6-.22-2.03-.68-.44-.45-.65-1.1-.65-1.97 0-.57.09-1.29.26-2.17l1.98-9.15 1.8-.33-.72 3.31h3.27l-.35 1.6h-3.28l-1.02 4.74c-.14.65-.22 1.2-.22 1.69 0 .45.11.78.33.98.23.2.6.3 1.11.3a3 3 0 0 0 1.06-.2c.35-.13.61-.25.8-.36l.13 1.63c-.19.12-.5.25-.95.4a4.88 4.88 0 0 1-1.51.21zm20.7-11.48a157.96 157.96 0 0 0-1.7 2.76l-1.08 1.8-1.07 1.8-.97 1.63-.72 1.23H112a157.98 157.98 0 0 0-.47-2.87l-.3-1.81-.32-1.8-.28-1.58a70.2 70.2 0 0 0-.23-1.16 205.99 205.99 0 0 0-1.52 5.47c-.5 1.88-.97 3.79-1.44 5.72h-1.78a205.25 205.25 0 0 1 1.94-7.44 259.75 259.75 0 0 1 1.01-3.55c.34-1.15.67-2.24 1-3.27h1.76l.47 2.14c.17.82.33 1.69.5 2.58a109.53 109.53 0 0 1 .82 5.12l1.48-2.45a1380.44 1380.44 0 0 1 3.2-5.26 81.42 81.42 0 0 1 1.38-2.13h1.72c-.2 2.32-.49 4.68-.84 7.07a267.5 267.5 0 0 1-1.16 7.2h-1.8c.38-1.98.72-3.9 1.02-5.76.31-1.86.59-3.67.82-5.44zm4.02 11.2h-1.72l2.31-10.71h1.72L123 26.27zm2-12.64a.97.97 0 0 1-.71-.3 1.1 1.1 0 0 1-.29-.8c0-.44.12-.78.37-1.04s.53-.38.84-.38a1 1 0 0 1 .72.3c.2.2.3.48.3.84 0 .41-.13.74-.4 1-.25.25-.53.38-.83.38zm2.32 12.63h-1.73l2.23-10.29a12.51 12.51 0 0 1 1.84-.46 10.34 10.34 0 0 1 1.77-.18c.56 0 1.03.09 1.44.26s.73.4.97.7c.25.3.43.65.55 1.07a5 5 0 0 1 .17 1.37c0 .32-.02.65-.07 1s-.11.7-.19 1.06l-1.18 5.47h-1.73l1.1-5.06.25-1.17c.08-.4.12-.78.12-1.14 0-.54-.14-1-.4-1.36-.28-.37-.79-.55-1.53-.55-.31 0-.61.02-.9.06a4.05 4.05 0 0 0-.75.17l-1.96 9.05zm11.7.27c-.54 0-1-.09-1.36-.26a2.45 2.45 0 0 1-.89-.73 2.81 2.81 0 0 1-.49-1.07 5.63 5.63 0 0 1-.15-1.31c0-.36.03-.71.09-1.06.05-.35.12-.7.2-1.06l1.18-5.48h1.72l-1.1 5.07a35.49 35.49 0 0 1-.23 1.1 5.56 5.56 0 0 0-.09 2c.05.22.13.42.25.59.11.17.27.3.47.41.2.1.44.16.74.16.53 0 1-.13 1.4-.38a4.04 4.04 0 0 0 1-.9 11.18 11.18 0 0 1 .2-1.44l1.42-6.61h1.72l-1.46 6.77-.16.92a6.21 6.21 0 0 0-.06.92 5.91 5.91 0 0 0 .33 1.97l-1.52.25a6.58 6.58 0 0 1-.18-.51 4.25 4.25 0 0 1-.15-.62 6.63 6.63 0 0 1-.48.43 3.58 3.58 0 0 1-.64.41 4.33 4.33 0 0 1-.8.31c-.3.08-.61.12-.95.12zm9.67.02c-.92 0-1.6-.22-2.03-.68s-.65-1.1-.65-1.97c0-.57.09-1.29.26-2.17l1.98-9.15 1.8-.33-.73 3.31h3.28l-.35 1.6h-3.28l-1.02 4.74c-.14.65-.22 1.2-.22 1.69 0 .45.11.78.33.98.23.2.6.3 1.11.3.36 0 .71-.07 1.06-.2.35-.13.61-.25.8-.36l.13 1.63c-.19.12-.5.25-.95.4a4.88 4.88 0 0 1-1.52.21zm7.66-.02c-.63 0-1.17-.1-1.63-.3a3.17 3.17 0 0 1-1.15-.82 3.33 3.33 0 0 1-.69-1.23 4.9 4.9 0 0 1-.22-1.48c0-.96.13-1.88.39-2.78a7.93 7.93 0 0 1 1.11-2.36 5.57 5.57 0 0 1 1.76-1.64 4.57 4.57 0 0 1 3.66-.39 2.3 2.3 0 0 1 1.4 1.44 3.1 3.1 0 0 1 .17 1c0 .65-.1 1.19-.32 1.64a3.39 3.39 0 0 1-.83 1.12 3.69 3.69 0 0 1-1.22.7 9.59 9.59 0 0 1-1.44.39c-.5.1-1 .16-1.52.2l-1.45.09c-.02.1-.02.2-.02.27v.16c0 .32.03.62.1.9a1.7 1.7 0 0 0 1.15 1.24c.33.13.76.19 1.29.19a5.46 5.46 0 0 0 2.44-.7l.15 1.62a6.6 6.6 0 0 1-3.13.74zm-1.76-5.88a22.9 22.9 0 0 0 1.96-.16c.6-.07 1.1-.2 1.54-.39.43-.19.77-.44 1.01-.75a1.98 1.98 0 0 0 .3-1.63 1.02 1.02 0 0 0-.23-.38 1.17 1.17 0 0 0-.43-.29 1.84 1.84 0 0 0-.69-.11c-.43 0-.83.1-1.21.3a3.76 3.76 0 0 0-1.01.82c-.3.34-.55.73-.76 1.17a6.93 6.93 0 0 0-.48 1.42z"></path></svg> </a></div> <label for="menu-checkbox" class="menu-checkbox-label"><svg xmlns="http://www.w3.org/2000/svg" width="19" height="19"><path fill="#454545" d="M6.561 0H2.197A2.2 2.2 0 0 0 0 2.197V6.56a2.2 2.2 0 0 0 2.197 2.197H6.56A2.2 2.2 0 0 0 8.757 6.56V2.197A2.198 2.198 0 0 0 6.561 0zm.712 6.561c0 .394-.32.713-.713.713H2.197a.713.713 0 0 1-.713-.713V2.197c0-.394.32-.713.713-.713H6.56c.393 0 .713.319.713.713v4.364zM16.773 0h-4.305a2.23 2.23 0 0 0-2.227 2.227v4.305a2.23 2.23 0 0 0 2.227 2.227h4.305A2.231 2.231 0 0 0 19 6.531V2.227A2.23 2.23 0 0 0 16.773 0zm.743 6.531a.743.743 0 0 1-.742.742h-4.305a.743.743 0 0 1-.742-.742V2.227c0-.409.333-.742.742-.742h4.305c.409 0 .742.333.742.742v4.304zM6.561 10.242H2.197A2.2 2.2 0 0 0 0 12.439v4.363A2.2 2.2 0 0 0 2.197 19H6.56a2.2 2.2 0 0 0 2.197-2.197V12.44a2.199 2.199 0 0 0-2.196-2.198zm.712 6.561c0 .393-.32.713-.713.713H2.197a.714.714 0 0 1-.713-.713V12.44c0-.393.32-.713.713-.713H6.56c.393 0 .713.32.713.713v4.363zM16.773 10.242h-4.305a2.23 2.23 0 0 0-2.227 2.227v4.305a2.23 2.23 0 0 0 2.227 2.227h4.305A2.231 2.231 0 0 0 19 16.773v-4.305a2.23 2.23 0 0 0-2.227-2.226zm.743 6.531a.743.743 0 0 1-.742.742h-4.305a.743.743 0 0 1-.742-.742v-4.305c0-.409.333-.742.742-.742h4.305c.409 0 .742.333.742.742v4.305z"></path></svg></label> <input id="menu-checkbox" type="checkbox" name="msc" class="hide-checkbox"><div class="menu-search-wrapper"><div class="search-box"> <script>(function() {
								var cx = '006007372603907121706:6uxkvpewtny';
								var gcse = document.createElement('script');
								gcse.type = 'text/javascript';
								gcse.async = true;
								gcse.src = 'https://cse.google.com/cse.js?cx=' + cx;
								var s = document.getElementsByTagName('script')[0];
								s.parentNode.insertBefore(gcse, s);
								})();</script> <div id="___gcse_0"><div class="gsc-control-cse gsc-control-cse-en"><div class="gsc-control-wrapper-cse" dir="ltr"><form class="gsc-search-box gsc-search-box-tools" accept-charset="utf-8"><table class="gsc-search-box" cellspacing="0" cellpadding="0"><tbody><tr><td class="gsc-input"><div class="gsc-input-box" id="gsc-iw-id1"><table style="width: 100%; padding: 0px;" id="gs_id50" class="gstl_50 gsc-input" cellspacing="0" cellpadding="0"><tbody><tr><td id="gs_tti50" class="gsib_a"><input autocomplete="off" type="text" size="10" class="gsc-input" name="search" title="search" style="width: 100%; padding: 0px; border: medium none; margin: 0px; height: auto; background: rgb(255, 255, 255) url(&quot;https://www.google.com/cse/static/images/1x/googlelogo_lightgrey_46x16dp.png&quot;) no-repeat scroll left center; text-indent: 48px; outline: currentcolor none medium;" id="gsc-i-id1" placeholder="Custom Search" dir="ltr" spellcheck="false"></td><td class="gsib_b"><div class="gsst_b" id="gs_st50" dir="ltr"><a class="gsst_a" href="javascript:void(0)" style="display: none;" title="Clear search box" role="button"><span class="gscb_a" id="gs_cb50" aria-hidden="true">×</span></a></div></td></tr></tbody></table></div></td><td class="gsc-search-button"><button class="gsc-search-button gsc-search-button-v2"><svg width="13" height="13" viewBox="0 0 13 13"><title>search</title><path d="m4.8495 7.8226c0.82666 0 1.5262-0.29146 2.0985-0.87438 0.57232-0.58292 0.86378-1.2877 0.87438-2.1144 0.010599-0.82666-0.28086-1.5262-0.87438-2.0985-0.59352-0.57232-1.293-0.86378-2.0985-0.87438-0.8055-0.010599-1.5103 0.28086-2.1144 0.87438-0.60414 0.59352-0.8956 1.293-0.87438 2.0985 0.021197 0.8055 0.31266 1.5103 0.87438 2.1144 0.56172 0.60414 1.2665 0.8956 2.1144 0.87438zm4.4695 0.2115 3.681 3.6819-1.259 1.284-3.6817-3.7 0.0019784-0.69479-0.090043-0.098846c-0.87973 0.76087-1.92 1.1413-3.1207 1.1413-1.3553 0-2.5025-0.46363-3.4417-1.3909s-1.4088-2.0686-1.4088-3.4239c0-1.3553 0.4696-2.4966 1.4088-3.4239 0.9392-0.92727 2.0864-1.3969 3.4417-1.4088 1.3553-0.011889 2.4906 0.45771 3.406 1.4088 0.9154 0.95107 1.379 2.0924 1.3909 3.4239 0 1.2126-0.38043 2.2588-1.1413 3.1385l0.098834 0.090049z"></path></svg></button></td><td class="gsc-clear-button"><div class="gsc-clear-button" title="clear results">&nbsp;</div></td></tr></tbody></table></form><div class="gsc-results-wrapper-overlay"><div class="gsc-results-close-btn" tabindex="0"></div><div class="gsc-positioningWrapper"><div class="gsc-tabsAreaInvisible"><div class="gsc-tabHeader gsc-inline-block gsc-tabhActive">Custom Search</div><span class="gs-spacer"> </span></div></div><div class="gsc-positioningWrapper"><div class="gsc-tabsAreaInvisible"></div></div><div class="gsc-above-wrapper-area-invisible"><table class="gsc-above-wrapper-area-container" cellspacing="0" cellpadding="0"><tbody><tr><td class="gsc-result-info-container"><div class="gsc-result-info-invisible"></div></td><td class="gsc-orderby-container"><div class="gsc-orderby-invisible"><div class="gsc-orderby-label gsc-inline-block">Sort by:</div><div class="gsc-option-menu-container gsc-inline-block"><div class="gsc-selected-option-container gsc-inline-block"><div class="gsc-selected-option">Relevance</div><div class="gsc-option-selector"></div></div><div class="gsc-option-menu-invisible"><div class="gsc-option-menu-item gsc-option-menu-item-highlighted"><div class="gsc-option">Relevance</div></div><div class="gsc-option-menu-item"><div class="gsc-option">Date</div></div></div></div></div></td></tr></tbody></table></div><div class="gsc-adBlockInvisible"></div><div class="gsc-wrapper"><div class="gsc-adBlockInvisible"></div><div class="gsc-resultsbox-invisible"><div class="gsc-resultsRoot gsc-tabData gsc-tabdActive"><div><div class="gsc-expansionArea"></div></div></div></div></div></div><div class="gsc-modal-background-image" tabindex="0"></div></div></div></div></div><nav class="header-nav"><ul class="menu-wrapper"><li class="main-menu"><span class="menu-cat">Electronics</span><ul class="dropdown"><li><a href="https://lastminuteengineers.com/electronics/arduino-projects/" class="ard">Arduino Projects</a></li><li><a href="https://lastminuteengineers.com/electronics/esp32-projects/" class="esp">ESP32 Projects</a></li><li><a href="https://lastminuteengineers.com/electronics/esp8266-projects/" class="esp">ESP8266 Projects</a></li></ul></li></ul></nav></div> <label for="menu-checkbox" class="sidebar-overlay"></label></div></div> <label for="nav-sidebar-checkbox" class="nav-sidebar-label"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="15"><path fill="#454545" d="M19.999 1.034c0 .571-.463 1.035-1.033 1.035H1.034a1.033 1.033 0 1 1 0-2.069h17.932c.57 0 1.033.463 1.033 1.034zM19.999 7.5c0 .571-.463 1.034-1.033 1.034H1.034a1.034 1.034 0 0 1 0-2.068h17.932c.57 0 1.033.464 1.033 1.034zM20 13.966c0 .571-.464 1.034-1.034 1.034H1.034a1.033 1.033 0 1 1 0-2.068h17.932c.57 0 1.034.463 1.034 1.034z"></path></svg></label><style type="text/css">.dropdown a:before
				{
					display: inline-block;
					position: relative;
					background-repeat: no-repeat;
				}
				.py:before
				{
					content:'';
					background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' version='1' viewBox='0 76 24 24'%3E%3Cpath fill='%23FFD141' d='M12 100c7 0 6-2 6-2v-3h-6v-1h8s4 0 4-6-3-6-3-6h-2v3s0 4-3 4h-6s-3 0-3 3v5s-1 3 5 3zm4-2a1 1 0 1 1 0-2 1 1 0 0 1 0 2z'/%3E%3Cpath fill='%233773A6' d='M12 76c-6 0-6 3-6 3v3h6v1H4s-4-1-4 5 4 6 4 6h1v-3s0-3 4-3h6s3 0 3-3v-5s0-4-6-4zm-3 2a1 1 0 1 1 0 2 1 1 0 0 1 0-2z'/%3E%3C/svg%3E");
					width: 24px;
					height: 24px;
					top: 6px;
					left: -20px;
				}
				.ard:before
				{
					content:'';
					background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='4.5 0 24 24'%3E%3Cpath fill='%2300878F' d='M12 9a4 4 0 0 0-.6 0 3.2 3.2 0 0 0-3.2 3c0 1.7 1.4 3 3.2 3h.5c2-.3 3.2-2.2 3.7-3-.5-.8-1.7-2.8-3.7-3zm1.4 3.6H9.7v-1.2h3.7v1.2zM21.6 9a4 4 0 0 0-.5 0c-2 .2-3.2 2.2-3.7 3 .5.8 1.7 2.7 3.7 3h.5c1.8 0 3.2-1.3 3.2-3s-1.4-3-3.2-3zm1.7 3.6H22v1.3h-1.2v-1.3h-1.2v-1.2h1.2v-1.3H22v1.3h1.3v1.2z'/%3E%3Cpath fill='%2300878F' d='M16.5 0a12 12 0 1 0 0 24 12 12 0 0 0 0-24zm5 16.8l-.7-.1a6.5 6.5 0 0 1-4.3-3 6.5 6.5 0 0 1-4.3 3h-.8c-2.7 0-5-2-5-4.7a4.9 4.9 0 0 1 5.8-4.7c2 .3 3.5 1.8 4.3 3a6.5 6.5 0 0 1 4.3-3h.8c2.7 0 5 2 5 4.7 0 2.6-2.3 4.8-5 4.8z'/%3E%3C/svg%3E");
					width: 24px;
					height: 24px;
					top: 6px;
					left: -20px;
				}
				.esp:before
				{
					content:'';
					background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 906.9 24 24'%3E%3Cpath fill='%23CC111F' d='M9.9 928.4c-.8-.3-1-.9-1-.9-.1 0 .7-1.3.7-1.9v-1.2a3.8 3.8 0 0 0-3.6-3.2 4 4 0 0 1-1.7-.4 4 4 0 0 1-1.8-1.8c-.3-.6-.5-1.2-.5-1.7l.3-1.8a4.2 4.2 0 0 1 3.1-2.5h1.9a12.1 12.1 0 0 1 10.4 14.9c-.1 0-1.4.7-2.2.7s-1.4-.5-1.5-.6l.5-2v-2a8.7 8.7 0 0 0-7.6-7.6c-.9-.1-1.1 0-1.3.3v.9l.9.2a7.2 7.2 0 0 1 5.9 10.4l-.4.7s-1.4-.1-2.1-.5z'/%3E%3Cpath fill='%23CC111F' d='M19.4 925.2l-.1-2a13.6 13.6 0 0 0-10.7-11.4c-.8-.2-2.9-.3-2.9-.3s-.2-1.2 0-1.8S8 908 8 908h.2A17 17 0 0 1 22.7 923c0 .2-.7 2-1.5 2.2s-1.8 0-1.8 0z'/%3E%3Cpath fill='%23CC111F' d='M23.2 919l-.1-.4c-.3-.9-.9-2-1.3-2.8a18.6 18.6 0 0 0-9.9-8.2l.1-.4c.1-.3 0-.3.7-.3A11 11 0 0 1 24 918.8l-.7.2z'/%3E%3Ccircle fill='%23CC111F' cx='6.1' cy='924.7' r='1.9'/%3E%3Cpath fill='%23CC111F' d='M13 930a12 12 0 0 1-8.4-20.6l-.7-.7a13 13 0 0 0 9.1 22.2 13 13 0 0 0 9.2-3.8l-.7-.7a12 12 0 0 1-8.5 3.5z'/%3E%3C/svg%3E");
					width: 24px;
					height: 24px;
					top: 6px;
					left: -20px;
				}</style></header><div id="content" class="site-content"><section id="primary" class="content-area"><main id="main" class="site-main"><div class="post-wrapper"> <input id="nav-sidebar-checkbox" type="checkbox" name="lfs" class="hide-checkbox"><nav class="nav-sidebar-wrapper"><div id="nav-sidebar" class="nav-sidebar scrolling"><div class="textwidget custom-html-widget"><div id="chapters"><p class="nav-title-nc">Wireless &amp; IoT</p><div class="nav-section-nc"> <a href="https://lastminuteengineers.com/sim800l-gsm-module-arduino-tutorial/" class="current-chapter">SIM800L GSM Module</a> <a href="https://lastminuteengineers.com/a6-gsm-gprs-module-arduino-tutorial/">A6 GSM GPRS Module</a> <a href="https://lastminuteengineers.com/sim900-gsm-shield-arduino-tutorial/">SIM900 GSM Shield</a> <a href="https://lastminuteengineers.com/nrf24l01-arduino-wireless-communication/">NRF24L01 Wireless Module</a> <a href="https://lastminuteengineers.com/433mhz-rf-wireless-arduino-tutorial/">433Mhz RF Wireless Module</a> <a href="https://lastminuteengineers.com/neo6m-gps-arduino-tutorial/">NEO6M GPS Module</a></div><p class="nav-title-nc">Sensors</p><div class="nav-section-nc"> <a href="https://lastminuteengineers.com/pir-sensor-arduino-tutorial/">PIR Sensor (HC-SR501)</a> <a href="https://lastminuteengineers.com/arduino-sr04-ultrasonic-sensor-tutorial/">SR04 Ultrasonic Sensor</a> <a href="https://lastminuteengineers.com/dht11-dht22-arduino-tutorial/">DHT11/DHT22 Temperature Humidity Sensor</a> <a href="https://lastminuteengineers.com/mq2-gas-senser-arduino-tutorial/">MQ2 Gas Sensor</a> <a href="https://lastminuteengineers.com/adxl335-accelerometer-arduino-tutorial/">ADXL335 Accelerometer</a> <a href="https://lastminuteengineers.com/ds18b20-arduino-tutorial/">DS18B20 Temp. Sensor</a> <a href="https://lastminuteengineers.com/multiple-ds18b20-arduino-tutorial/">Multiple DS18B20 Sensors</a> <a href="https://lastminuteengineers.com/bme280-arduino-tutorial/">BME280 Temperature, Humidity &amp; Pressure Sensor</a> <a href="https://lastminuteengineers.com/how-rfid-works-rc522-arduino-tutorial/">RC522 RFID Module</a></div><p class="nav-title-nc">Displays</p><div class="nav-section-nc"> <a href="https://lastminuteengineers.com/arduino-1602-character-lcd-tutorial/">16×2 Character LCD</a> <a href="https://lastminuteengineers.com/seven-segment-arduino-tutorial/">7 Segment Display </a><a href="https://lastminuteengineers.com/nokia-5110-lcd-arduino-tutorial/">Nokia 5110 Graphic LCD</a> <a href="https://lastminuteengineers.com/oled-display-arduino-tutorial/">OLED Graphic Display</a></div><p class="nav-title-nc">Robotics</p><div class="nav-section-nc"> <a href="https://lastminuteengineers.com/l293d-dc-motor-arduino-tutorial/">L293D with DC Motor </a><a href="https://lastminuteengineers.com/stepper-motor-l293d-arduino-tutorial/">L293D with Stepper Motor </a><a href="https://lastminuteengineers.com/l293d-motor-driver-shield-arduino-tutorial/">L293D Motor Driver Shield</a> <a href="https://lastminuteengineers.com/l298n-dc-stepper-driver-arduino-tutorial/">L298N with DC Motor </a><a href="https://lastminuteengineers.com/stepper-motor-l298n-arduino-tutorial/">L298N with Stepper Motor </a><a href="https://lastminuteengineers.com/drv8825-stepper-motor-driver-arduino-tutorial/">DRV8825 Stepper Driver</a> <a href="https://lastminuteengineers.com/a4988-stepper-motor-driver-arduino-tutorial/">A4988 Stepper Driver</a></div><p class="nav-title-nc">Modules</p><div class="nav-section-nc"> <a href="https://lastminuteengineers.com/74hc595-shift-register-arduino-tutorial/">74HC595 Shift Register</a> <a href="https://lastminuteengineers.com/joystick-interfacing-arduino-processing/">2-Axis Joystick</a> <a href="https://lastminuteengineers.com/ds3231-rtc-arduino-tutorial/">DS3231 RTC Module</a> <a href="https://lastminuteengineers.com/ds1307-rtc-arduino-tutorial/">DS1307 RTC Module</a> <a href="https://lastminuteengineers.com/arduino-keypad-tutorial/">4×4 Membrane Keypad</a> <a href="https://lastminuteengineers.com/arduino-micro-sd-card-module-tutorial/">Micro SD Card Module</a></div></div></div></div> <label for="nav-sidebar-checkbox" class="sidebar-overlay"></label></nav><div class="post-629 post type-post status-publish format-standard has-post-thumbnail hentry category-arduino-projects entry"><article id="post-629"><div class="post-header"><div class="post-title"><h1 class="entry-title">Send Receive SMS &amp; Call with SIM800L GSM Module &amp; Arduino</h1></div></div><div class="featured-image"><figure class="post-thumbnail"> <img src="In-Depth%20%20Send%20Receive%20SMS%20&amp;%20Call%20with%20SIM800L%20GSM%20Module%20&amp;%20Arduino_files/Arduino-Project-Working-Interfacing-SIM800L-GSM-Module-Sendi.jpg" class="attachment-post-thumbnail size-post-thumbnail wp-post-image" alt="" srcset="https://lastminuteengineers.com/wp-content/uploads/2018/07/Arduino-Project-Working-Interfacing-SIM800L-GSM-Module-Sending-Receiving-SMS-Making-Call.jpg 763w, https://lastminuteengineers.com/wp-content/uploads/2018/07/Arduino-Project-Working-Interfacing-SIM800L-GSM-Module-Sending-Receiving-SMS-Making-Call-300x171.jpg 300w, https://lastminuteengineers.com/wp-content/uploads/2018/07/Arduino-Project-Working-Interfacing-SIM800L-GSM-Module-Sending-Receiving-SMS-Making-Call-696x398.jpg 696w, https://lastminuteengineers.com/wp-content/uploads/2018/07/Arduino-Project-Working-Interfacing-SIM800L-GSM-Module-Sending-Receiving-SMS-Making-Call-735x420.jpg 735w" sizes="(max-width: 763px) 100vw, 763px" width="763" height="436"></figure><!-- .post-thumbnail --></div><div class="entry-content"><p>Whether
 you want to listen to what happens in your house that’s miles away from
 you or activate sprinkler system in your garden just with a silent 
call; Then SIM800L GSM/GPRS module serves as a solid launching point for
 you to get you started with IoT!</p><p>SIM800L GSM/GPRS module is a 
miniature GSM modem, which can be integrated into a great number of IoT 
projects. You can use this module to accomplish almost anything a normal
 cell phone can; SMS text messages, Make or receive phone calls, 
connecting to internet through GPRS, TCP/IP, and more! To top it off, 
the module supports quad-band GSM/GPRS network, meaning it works pretty 
much anywhere in the world.</p><h2 id="hardware-overview-of-sim800l-gsmgprs-module">Hardware Overview of SIM800L GSM/GPRS module<a href="#hardware-overview-of-sim800l-gsmgprs-module" class="hlink"></a></h2><p>At the heart of the module is a SIM800L GSM cellular chip from SimCom. The operating voltage of the chip is from <strong>3.4V to 4.4V</strong>,
 which makes it an ideal candidate for direct LiPo battery supply. This 
makes it a good choice for embedding into&nbsp;projects without a lot 
of&nbsp;space.</p><p><img class="aligncenter size-full margin-top-bottom-40" src="In-Depth%20%20Send%20Receive%20SMS%20&amp;%20Call%20with%20SIM800L%20GSM%20Module%20&amp;%20Arduino_files/SIM800L-Module-Hardware-Overview-LED-Indicator-u.jpg" alt="SIM800L Module Hardware Overview - LED Indicator, u.fl Connector, Helical Antenna" width="461" height="189"></p><p>All
 the necessary data pins of SIM800L GSM chip are broken out to a 0.1″ 
pitch headers. This includes pins required for communication with a 
microcontroller over <strong>UART</strong>. The module supports baud rate from <strong>1200bps</strong> to <strong>115200bps</strong> with Auto-Baud detection.</p><p>The module needs an external antenna to connect to a network. The module usually comes with a <strong>Helical Antenna</strong>
 and solders directly to NET pin on PCB. The board also has a U.FL 
connector facility in case you want to keep the antenna away from the 
board.</p><p><img class="aligncenter size-full margin-top-bottom-40" src="In-Depth%20%20Send%20Receive%20SMS%20&amp;%20Call%20with%20SIM800L%20GSM%20Module%20&amp;%20Arduino_files/SIM800L-Module-Hardware-Overview-Micro-SIM-Socket-Direction-.jpg" alt="SIM800L Module Hardware Overview - Micro SIM Socket, Direction to Insert SIM" width="480" height="248"></p><p>There’s a&nbsp;SIM socket on the&nbsp;back! Any activated, <strong>2G micro SIM card</strong> would work perfectly. Correct direction for inserting SIM card is normally engraved on the surface of the SIM socket.</p><p>This
 module measures only 1 inch² but packs a surprising amount of features 
into its little frame. Some of them are listed below:</p><ul class="one-liner-list"><li>Supports Quad-band: GSM850, EGSM900, DCS1800 and PCS1900</li><li>Connect onto any global GSM network with any 2G SIM</li><li>Make and receive voice calls using an external 8Ω speaker &amp; electret microphone</li><li>Send and receive SMS messages</li><li>Send and receive GPRS data (TCP/IP, HTTP, etc.)</li><li>Scan and receive FM radio broadcasts</li><li>Transmit Power:<ul class="margin-bottom-0"><li>Class 4 (2W) for GSM850</li><li>Class 1 (1W) for DCS1800</li></ul></li><li>Serial-based AT Command Set</li><li>FL connectors for cell antennae</li><li>Accepts Micro SIM Card</li></ul><p>For more information about SIM800L GSM Cellular chip, check out this datasheet.</p><div class="pdf-button-wrapper"><a class="pdf-button" href="https://lastminuteengineers.com/datasheets/SIM800L-Datasheet.pdf" target="_blank" rel="noopener noreferrer">SIM800L Datasheet</a></div><h2 id="led-status-indicators">LED Status Indicators<a href="#led-status-indicators" class="hlink"></a></h2><p>There
 is an LED on the top right side of the SIM800L Cellular Module which 
indicates the status of your cellular network. It’ll blink at various 
rates to show what state it’s in:</p><div class="side-by-side side-by-side1"><p><img class="aligncenter size-full wp-image-620" src="In-Depth%20%20Send%20Receive%20SMS%20&amp;%20Call%20with%20SIM800L%20GSM%20Module%20&amp;%20Arduino_files/Netlight-LED-Blinking-Finding-Network-Connection.gif" alt="Netlight LED Blinking Finding Network Connection" width="121" height="126"><b>Blink every 1s</b></p><p>The module is running but hasn’t made connection to the cellular network yet.</p></div><div class="side-by-side side-by-side2"><p><img class="aligncenter size-full wp-image-619" src="In-Depth%20%20Send%20Receive%20SMS%20&amp;%20Call%20with%20SIM800L%20GSM%20Module%20&amp;%20Arduino_files/Netlight-LED-Blinking-Active-GPRS-Connection.gif" alt="Netlight LED Blinking Active GPRS Connection" width="121" height="126"><b>Blink every 2s</b></p><p>The GPRS data connection you requested is active.</p></div><div class="side-by-side side-by-side3"><p><img class="aligncenter size-full wp-image-621" src="In-Depth%20%20Send%20Receive%20SMS%20&amp;%20Call%20with%20SIM800L%20GSM%20Module%20&amp;%20Arduino_files/Netlight-LED-Blinking-Network-Connection-Established.gif" alt="Netlight LED Blinking Network Connection Established" width="121" height="126"><b>Blink every 3s</b></p><p>The module has made contact with the cellular network &amp; can send/receive voice and SMS.</p></div><h2 id="selecting-antenna">Selecting Antenna<a href="#selecting-antenna" class="hlink"></a></h2><p>An
 antenna is required to use the module for any kind of voice or data 
communications as well as some SIM commands. So, selecting an antenna 
could be a crucial thing. There are two ways you can add an antenna to 
your SIM800L module.</p><p>The first one is a Helical GSM antenna which 
usually comes with the module and solders directly to NET pin on PCB. 
This antenna is very useful for projects that need to save&nbsp;space 
but struggles in getting connectivity especially if your project is 
indoors.</p><p><img class="aligncenter size-full" src="In-Depth%20%20Send%20Receive%20SMS%20&amp;%20Call%20with%20SIM800L%20GSM%20Module%20&amp;%20Arduino_files/SIM800L-GSM-Module-with-Helical-Antenna.jpg" alt="SIM800L GSM Module with Helical Antenna" width="152" height="239"></p><p>The
 second one is any 3dBi GSM antenna along with a U.FL to SMA adapter 
which can be obtained online for less than $3. You can snap-fit this 
antenna to small u.fl connector located on the top-left corner of the 
module. This type of antenna has a better performance and allows putting
 your module inside a metal case – as long the antenna is outside.</p><p><img class="aligncenter size-full" src="In-Depth%20%20Send%20Receive%20SMS%20&amp;%20Call%20with%20SIM800L%20GSM%20Module%20&amp;%20Arduino_files/SIM800L-GSM-Module-with-2dBi-Duck-Antenna.jpg" alt="SIM800L GSM Module with 2dBi Duck Antenna" width="237" height="260"></p><h2 id="supplying-power-for-sim800l-module">Supplying Power for SIM800L module<a href="#supplying-power-for-sim800l-module" class="hlink"></a></h2><p>One of the most important parts of getting the SIM800L module working is supplying it with enough power.</p><p>Depending
 on which state it’s in, the SIM800L can be a relatively power-hungry 
device. The maximum current draw of the module is around 2A during 
transmission burst. It usually won’t pull that much, but may require 
around 216mA during phone calls or 80mA during network transmissions. 
This chart from the datasheet summarizes what you may expect:</p><table class="tabler rowheader XWKKY"><caption class="wp-caption-text">Current consumption of SIM800L module at different states</caption><tbody><tr class="tabler-header"><td>Modes</td><td>Frequency</td><td>Current Consumption</td></tr><tr><td>Power down</td><td></td><td>60 uA</td></tr><tr><td>Sleep mode</td><td></td><td>1 mA</td></tr><tr><td>Stand by</td><td></td><td>18 mA</td></tr><tr><td rowspan="4">Call</td><td>GSM850</td><td>199 mA</td></tr><tr><td>EGSM900</td><td>216 mA</td></tr><tr><td>DCS1800</td><td>146 mA</td></tr><tr><td>PCS1900</td><td>131 mA</td></tr><tr class="adjuster1"><td>GPRS</td><td></td><td>453 mA</td></tr><tr class="adjuster2"><td>Transmission burst</td><td></td><td>2 A</td></tr></tbody></table><p>Since
 SIM800L module doesn’t come with onboard voltage regulator, an external
 power supply adjusted to voltage between 3.4V to 4.4V (Ideal 4.1V) is 
required. The power supply should also be able to source 2A of surge 
current, otherwise the module will keep shutting down. Here are some 
options you can consider to correctly power your GSM module.</p><h3 id="37v-lipo-battery-recommended">3.7v Li-Po Battery (Recommended)</h3><p>One
 of the cool things about Li-Po batteries is that their voltage is 
generally in the range of 3.7V – 4.2V, perfect for SIM800L Module. Any <strong>1200mAh or larger</strong> sized Lithium ion/polymer battery is best since it can provide the correct voltage range even during 2 Amp spikes.</p><p><img class="aligncenter size-full wp-image-605" src="In-Depth%20%20Send%20Receive%20SMS%20&amp;%20Call%20with%20SIM800L%20GSM%20Module%20&amp;%20Arduino_files/1200mAh-LiPo-Battery.jpg" alt="1200mAh LiPo Battery" srcset="https://lastminuteengineers.com/wp-content/uploads/2018/07/1200mAh-LiPo-Battery.jpg 340w, https://lastminuteengineers.com/wp-content/uploads/2018/07/1200mAh-LiPo-Battery-300x164.jpg 300w" sizes="(max-width: 340px) 100vw, 340px" width="340" height="186"></p><h3 id="dcdc-buck-converter">DC-DC Buck Converter</h3><p>Any 2A-rated DC-DC buck converter like <strong>LM2596</strong> would work. These are much more efficient than a liner voltage regulator like LM317 or LM338.</p><p><img class="aligncenter size-full wp-image-609" src="In-Depth%20%20Send%20Receive%20SMS%20&amp;%20Call%20with%20SIM800L%20GSM%20Module%20&amp;%20Arduino_files/LM2596-DC-DC-Buck-Converter.jpg" alt="LM2596 DC-DC Buck Converter" width="261" height="126"></p><div class="special-block special-warning"><h3>WARNING</h3><p>You
 should be very careful to not to disconnect the GND before the VCC and 
always connect GND before VCC. Otherwise the module can use the low 
voltage serial pins as ground and can get destroyed instantly.</p></div><h2 id="sim800l-gsm-module-pinout">SIM800L GSM Module Pinout<a href="#sim800l-gsm-module-pinout" class="hlink"></a></h2><p>The SIM800L module has total 12 pins that interface it to the outside world. The connections are as follows:</p><p><img class="aligncenter size-full wp-image-613" src="In-Depth%20%20Send%20Receive%20SMS%20&amp;%20Call%20with%20SIM800L%20GSM%20Module%20&amp;%20Arduino_files/SIM800L-GSM-Module-Pinout.jpg" alt="SIM800L GSM Module Pinout" srcset="https://lastminuteengineers.com/wp-content/uploads/2018/07/SIM800L-GSM-Module-Pinout.jpg 481w, https://lastminuteengineers.com/wp-content/uploads/2018/07/SIM800L-GSM-Module-Pinout-300x172.jpg 300w" sizes="(max-width: 481px) 100vw, 481px" width="481" height="276"></p><p><span class="pinout pinout-yellow">NET</span> is a pin where you can solder Helical Antenna provided along with the module.</p><p><span class="pinout pinout-red">VCC</span>
 supplies power for the module. This can be anywhere from 3.4V to 4.4 
volts. Remember connecting it to 5V pin will likely destroy your module!
 It doesn’t even run on 3.3 V! An external power source like Li-Po 
battery or DC-DC buck converters rated 3.7V 2A would work.</p><p><span class="pinout pinout-gray">RST (Reset)</span> is a hard reset pin. If you absolutely got the module in a bad space, pull this pin low for 100ms to perform a hard reset.</p><p><span class="pinout pinout-blue">RxD (Receiver)</span> pin is used for serial communication.</p><p><span class="pinout pinout-purple">TxD (Transmitter)</span> pin is used for serial communication.</p><p><span class="pinout pinout-black">GND</span> is the Ground Pin and needs to be connected to GND pin on the Arduino.</p><p><span class="pinout pinout-dark-blue">RING</span>
 pin acts as a Ring Indicator. It is basically the ‘interrupt’ out pin 
from the module. It is by default high and will pulse low for 120ms when
 a call is received. It can also be configured to pulse when an SMS is 
received.</p><p><span class="pinout pinout-brown">DTR</span> pin 
activates/deactivates sleep mode. Pulling it HIGH will put module in 
sleep mode, disabling serial communication. Pulling it LOW will wake the
 module up.</p><p><span class="pinout pinout-green">MIC±</span> is a differential microphone input. The two microphone pins can be connected directly to these pins.</p><p><span class="pinout pinout-orange">SPK±</span> is a differential speaker interface. The two pins of a speaker can be tied directly to these two pins.</p><h2 id="wiring-sim800l-gsm-module-to-arduino-uno">Wiring – Connecting SIM800L GSM module to Arduino UNO<a href="#wiring-sim800l-gsm-module-to-arduino-uno" class="hlink"></a></h2><p>Now that we know everything about the module, we can begin hooking it up to our Arduino!</p><p>Start
 by soldering/connecting the antenna, insert fully activated Micro SIM 
card in the socket. Now, connect Tx pin on module to digital pin#3 on 
Arduino as we’ll be using <a href="https://www.arduino.cc/en/Reference/softwareSerial">software serial</a> to talk to the module.</p><p>We
 cannot directly connect Rx pin on module to Arduino’s digital pin as 
Arduino Uno uses 5V GPIO whereas the SIM800L module uses 3.3V level 
logic and <strong>is NOT 5V tolerant</strong>. This means the Tx signal 
coming from the Arduino Uno must be stepped down to 3.3V so as not to 
damage the SIM800L module. There are several ways to do this but the 
easiest way is to use a simple resistor divider. A 10K resistor between 
SIM800L Rx and Arduino D2, and 20K between SIM800L Rx and GND would work
 fine.</p><p>Now we are remaining with the pins that are used to supply 
power for the module. As you have multiple choices for powering up the 
module, we have provided two example schematics. The one uses 1200mAh 
Li-Po battery and other one uses LM2596 DC-DC buck converter.</p><figure id="attachment_606" aria-describedby="caption-attachment-606" style="width: 586px" class="wp-caption aligncenter"><img class="size-full wp-image-606" src="In-Depth%20%20Send%20Receive%20SMS%20&amp;%20Call%20with%20SIM800L%20GSM%20Module%20&amp;%20Arduino_files/Arduino-Wiring-Fritzing-Connections-with-SIM800L-GSM-GPR_002.jpg" alt="Arduino Wiring Fritzing Connections with SIM800L GSM GPRS Module &amp; 3.7V LiPo Battery" srcset="https://lastminuteengineers.com/wp-content/uploads/2018/07/Arduino-Wiring-Fritzing-Connections-with-SIM800L-GSM-GPRS-Module-3.7V-LiPo-Battery.jpg 586w, https://lastminuteengineers.com/wp-content/uploads/2018/07/Arduino-Wiring-Fritzing-Connections-with-SIM800L-GSM-GPRS-Module-3.7V-LiPo-Battery-300x165.jpg 300w" sizes="(max-width: 586px) 100vw, 586px" width="586" height="323"><figcaption id="caption-attachment-606" class="wp-caption-text">Wiring SIM800L GSM GPRS Module with Arduino UNO</figcaption></figure><figure id="attachment_607" aria-describedby="caption-attachment-607" style="width: 586px" class="wp-caption aligncenter"><img class="size-full wp-image-607" src="In-Depth%20%20Send%20Receive%20SMS%20&amp;%20Call%20with%20SIM800L%20GSM%20Module%20&amp;%20Arduino_files/Arduino-Wiring-Fritzing-Connections-with-SIM800L-GSM-GPRS-Mo.jpg" alt="Arduino Wiring Fritzing Connections with SIM800L GSM GPRS Module &amp; LM2596" srcset="https://lastminuteengineers.com/wp-content/uploads/2018/07/Arduino-Wiring-Fritzing-Connections-with-SIM800L-GSM-GPRS-Module-LM2596.jpg 586w, https://lastminuteengineers.com/wp-content/uploads/2018/07/Arduino-Wiring-Fritzing-Connections-with-SIM800L-GSM-GPRS-Module-LM2596-300x170.jpg 300w" sizes="(max-width: 586px) 100vw, 586px" width="586" height="333"><figcaption id="caption-attachment-607" class="wp-caption-text">Wiring SIM800L GSM GPRS Module with Arduino UNO</figcaption></figure><div class="special-block special-tip"><h3>TIP</h3><p>In case you are using LM2596 buck converter to power up the module, remember to common all the ground in the circuit.</p></div><p>Once you have everything hooked up you are ready to go!</p><h2 id="arduino-code-testing-at-commands">Arduino Code – Testing AT Commands<a href="#arduino-code-testing-at-commands" class="hlink"></a></h2><p>For
 sending AT commands and communicating with the SIM800L module, we will 
use the serial monitor. The sketch below will enable the Arduino to 
communicate with the SIM800L module on serial monitor. Before we proceed
 with detailed breakdown of code, connect your Arduino to PC, compile 
below code and upload it to the Arduino.</p><p>Once you open a serial monitor,<strong> make sure that ‘Both NL &amp; CR’ option is selected!</strong></p><div class="example language-c"><div class="lme-syntax-default"><pre class=" language-c"><span class="ctext" title="Click to Copy"><span class="copied">Copied!</span></span><code class=" language-c">#include <span class="lme-string">&lt;SoftwareSerial.h&gt;</span>

<span class="lme-comment">//Create software serial object to communicate with SIM800L</span>
SoftwareSerial <span class="lme-function">mySerial</span>(<span class="lme-number">3</span>, <span class="lme-number">2</span>); <span class="lme-comment">//SIM800L Tx &amp; Rx is connected to Arduino #3 &amp; #2</span>

<span class="lme-keyword">void</span> <span class="lme-function">setup</span>()
{
  <span class="lme-comment">//Begin serial communication with Arduino and Arduino IDE (Serial Monitor)</span>
  Serial.<span class="lme-function">begin</span>(<span class="lme-number">9600</span>);
  
  <span class="lme-comment">//Begin serial communication with Arduino and SIM800L</span>
  mySerial.<span class="lme-function">begin</span>(<span class="lme-number">9600</span>);

  Serial.<span class="lme-function">println</span>(<span class="lme-string">"Initializing..."</span>);
  <span class="lme-function">delay</span>(<span class="lme-number">1000</span>);

  mySerial.<span class="lme-function">println</span>(<span class="lme-string">"AT"</span>); <span class="lme-comment">//Once the handshake test is successful, it will back to OK</span>
  <span class="lme-function">updateSerial</span>();
  mySerial.<span class="lme-function">println</span>(<span class="lme-string">"AT+CSQ"</span>); <span class="lme-comment">//Signal quality test, value range is 0-31 , 31 is the best</span>
  <span class="lme-function">updateSerial</span>();
  mySerial.<span class="lme-function">println</span>(<span class="lme-string">"AT+CCID"</span>); <span class="lme-comment">//Read SIM information to confirm whether the SIM is plugged</span>
  <span class="lme-function">updateSerial</span>();
  mySerial.<span class="lme-function">println</span>(<span class="lme-string">"AT+CREG?"</span>); <span class="lme-comment">//Check whether it has registered in the network</span>
  <span class="lme-function">updateSerial</span>();
}

<span class="lme-keyword">void</span> <span class="lme-function">loop</span>()
{
  <span class="lme-function">updateSerial</span>();
}

<span class="lme-keyword">void</span> <span class="lme-function">updateSerial</span>()
{
  <span class="lme-function">delay</span>(<span class="lme-number">500</span>);
  <span class="lme-keyword">while</span> (Serial.<span class="lme-function">available</span>()) 
  {
    mySerial.<span class="lme-function">write</span>(Serial.<span class="lme-function">read</span>());<span class="lme-comment">//Forward what Serial received to Software Serial Port</span>
  }
  <span class="lme-keyword">while</span>(mySerial.<span class="lme-function">available</span>()) 
  {
    Serial.<span class="lme-function">write</span>(mySerial.<span class="lme-function">read</span>());<span class="lme-comment">//Forward what Software Serial received to Serial Port</span>
  }
}</code></pre></div></div><p>The sketch starts by including a <strong>SoftwareSerial.h</strong> library and initializing it with the Arduino pins to which Tx and Rx of SIM800L module is connected.</p><div class="example language-c"><div class="lme-syntax-default"><pre class=" language-c"><span class="ctext" title="Click to Copy"><span class="copied">Copied!</span></span><code class=" language-c">#include <span class="lme-string">&lt;SoftwareSerial.h&gt;</span>

<span class="lme-comment">//Create software serial object to communicate with SIM800L</span>
SoftwareSerial <span class="lme-function">mySerial</span>(<span class="lme-number">3</span>, <span class="lme-number">2</span>); <span class="lme-comment">//SIM800L Tx &amp; Rx is connected to Arduino #3 &amp; #2</span></code></pre></div></div><p>In
 setup function: we initialize a serial communication link between 
Arduino, Arduino IDE and SIM800L module at a baud rate of 9600.</p><div class="example language-c"><div class="lme-syntax-default"><pre class=" language-c"><span class="ctext" title="Click to Copy"><span class="copied">Copied!</span></span><code class=" language-c"><span class="lme-comment">//Begin serial communication with Arduino and Arduino IDE (Serial Monitor)</span>
  Serial.<span class="lme-function">begin</span>(<span class="lme-number">9600</span>);
  
  <span class="lme-comment">//Begin serial communication with Arduino and SIM800L</span>
  mySerial.<span class="lme-function">begin</span>(<span class="lme-number">9600</span>);</code></pre></div></div><p>Now that we have established a basic connection, we will try to communicate with the SIM800L module by sending AT commands.</p><p><strong>AT</strong>
 – It is the most basic AT command. It also initializes Auto-baud’er. If
 it works you should see the AT characters echo and then OK, telling you
 it’s OK and it’s understanding you correctly! You can then send some 
commands to query the module and get information about it such as</p><p><strong>AT+CSQ</strong>
 – Check the ‘signal strength’ – the first # is dB strength, it should 
be higher than around 5. Higher is better. Of course it depends on your 
antenna and location!</p><p><strong>AT+CCID</strong> – get the SIM card number – this tests that the SIM card is found OK and you can verify the number is written on the card.</p><p><strong>AT+CREG?</strong>
 Check that you’re registered on the network. The second # should be 1 
or 5. 1 indicates you are registered to home network and 5 indicates 
roaming network. Other than these two numbers indicate you are not 
registered to any network.</p><div class="example language-c"><div class="lme-syntax-default"><pre class=" language-c"><span class="ctext" title="Click to Copy"><span class="copied">Copied!</span></span><code class=" language-c">  mySerial.<span class="lme-function">println</span>(<span class="lme-string">"AT"</span>); <span class="lme-comment">//Once the handshake test is successful, it will back to OK</span>
  <span class="lme-function">updateSerial</span>();
  mySerial.<span class="lme-function">println</span>(<span class="lme-string">"AT+CSQ"</span>); <span class="lme-comment">//Signal quality test, value range is 0-31 , 31 is the best</span>
  <span class="lme-function">updateSerial</span>();
  mySerial.<span class="lme-function">println</span>(<span class="lme-string">"AT+CCID"</span>); <span class="lme-comment">//Read SIM information to confirm whether the SIM is plugged</span>
  <span class="lme-function">updateSerial</span>();
  mySerial.<span class="lme-function">println</span>(<span class="lme-string">"AT+CREG?"</span>); <span class="lme-comment">//Check whether it has registered in the network</span>
  <span class="lme-function">updateSerial</span>();</code></pre></div></div><p>In the looping part of the code, we call custom function called <strong>updateSerial() </strong>which
 continuously waits for any inputs from the serial monitor and send it 
to the SIM800L module through the D2 pin (Rx of module). It also 
continuously reads the D3 pin (Tx of module) if the SIM800L module has 
any responses.</p><div class="example language-c"><div class="lme-syntax-default"><pre class=" language-c"><span class="ctext" title="Click to Copy"><span class="copied">Copied!</span></span><code class=" language-c"><span class="lme-keyword">void</span> <span class="lme-function">updateSerial</span>()
{
  <span class="lme-function">delay</span>(<span class="lme-number">500</span>);
  <span class="lme-keyword">while</span> (Serial.<span class="lme-function">available</span>()) 
  {
    mySerial.<span class="lme-function">write</span>(Serial.<span class="lme-function">read</span>());<span class="lme-comment">//Forward what Serial received to Software Serial Port</span>
  }
  <span class="lme-keyword">while</span>(mySerial.<span class="lme-function">available</span>()) 
  {
    Serial.<span class="lme-function">write</span>(mySerial.<span class="lme-function">read</span>());<span class="lme-comment">//Forward what Software Serial received to Serial Port</span>
  }
}</code></pre></div></div><p>You should see below output on serial monitor.</p><figure id="attachment_626" aria-describedby="caption-attachment-626" style="width: 499px" class="wp-caption aligncenter"><img class="size-full wp-image-626" src="In-Depth%20%20Send%20Receive%20SMS%20&amp;%20Call%20with%20SIM800L%20GSM%20Module%20&amp;%20Arduino_files/SIM800L-GSM-Module-Basic-AT-Commands-on-Arduino.png" alt="SIM800L GSM Module Basic AT Commands on Arduino" srcset="https://lastminuteengineers.com/wp-content/uploads/2018/07/SIM800L-GSM-Module-Basic-AT-Commands-on-Arduino.png 499w, https://lastminuteengineers.com/wp-content/uploads/2018/07/SIM800L-GSM-Module-Basic-AT-Commands-on-Arduino-300x201.png 300w" sizes="(max-width: 499px) 100vw, 499px" width="499" height="334"><figcaption id="caption-attachment-626" class="wp-caption-text">Basic AT Commands on SIM800L GSM Module</figcaption></figure><p>You
 are now free to send any commands through serial monitor like below 
which gives more information about network connection &amp; battery 
status:</p><p><strong>ATI</strong> – Get the module name and revision</p><p><strong>AT+COPS?</strong> – Check that you’re connected to the network, in this case BSNL</p><p><strong>AT+COPS=?</strong> – Return the list of operators present in the network.</p><p><strong>AT+CBC</strong>
 – will return the lipo battery state. The second number is the % full 
(in this case its 93%) and the third number is the actual voltage in mV 
(in this case, 3.877 V)</p><figure id="attachment_627" aria-describedby="caption-attachment-627" style="width: 499px" class="wp-caption aligncenter"><img class="size-full wp-image-627" src="In-Depth%20%20Send%20Receive%20SMS%20&amp;%20Call%20with%20SIM800L%20GSM%20Module%20&amp;%20Arduino_files/SIM800L-GSM-Module-Network-Connection-AT-Commands-on-Arduino.png" alt="SIM800L GSM Module Network Connection AT Commands on Arduino" srcset="https://lastminuteengineers.com/wp-content/uploads/2018/07/SIM800L-GSM-Module-Network-Connection-AT-Commands-on-Arduino.png 499w, https://lastminuteengineers.com/wp-content/uploads/2018/07/SIM800L-GSM-Module-Network-Connection-AT-Commands-on-Arduino-300x213.png 300w, https://lastminuteengineers.com/wp-content/uploads/2018/07/SIM800L-GSM-Module-Network-Connection-AT-Commands-on-Arduino-100x70.png 100w" sizes="(max-width: 499px) 100vw, 499px" width="499" height="354"><figcaption id="caption-attachment-627" class="wp-caption-text">Network Connection AT Commands on SIM800L GSM Module</figcaption></figure><p>For more SIM800L AT Commands, please refer below document.</p><div class="pdf-button-wrapper"><a class="pdf-button" href="https://lastminuteengineers.com/datasheets/SIM800-AT-Commands.pdf" target="_blank" rel="noopener noreferrer">SIM800L AT Commands</a></div><h2 id="arduino-code-sending-sms">Arduino Code – Sending SMS<a href="#arduino-code-sending-sms" class="hlink"></a></h2><p>Let’s
 move on to the interesting stuff. Let’s program our Arduino to send an 
SMS to any phone number you wish. Before trying the sketch out, you need
 to enter the phone number. Search for the string ZZxxxxxxxxxx and 
replace ZZ with county code and xxxxxxxxxx with the 10 digit phone 
number.</p><div class="example language-c"><div class="lme-syntax-default"><pre class=" language-c"><span class="ctext" title="Click to Copy"><span class="copied">Copied!</span></span><code class=" language-c">#include <span class="lme-string">&lt;SoftwareSerial.h&gt;</span>

<span class="lme-comment">//Create software serial object to communicate with SIM800L</span>
SoftwareSerial <span class="lme-function">mySerial</span>(<span class="lme-number">3</span>, <span class="lme-number">2</span>); <span class="lme-comment">//SIM800L Tx &amp; Rx is connected to Arduino #3 &amp; #2</span>

<span class="lme-keyword">void</span> <span class="lme-function">setup</span>()
{
  <span class="lme-comment">//Begin serial communication with Arduino and Arduino IDE (Serial Monitor)</span>
  Serial.<span class="lme-function">begin</span>(<span class="lme-number">9600</span>);
  
  <span class="lme-comment">//Begin serial communication with Arduino and SIM800L</span>
  mySerial.<span class="lme-function">begin</span>(<span class="lme-number">9600</span>);

  Serial.<span class="lme-function">println</span>(<span class="lme-string">"Initializing..."</span>); 
  <span class="lme-function">delay</span>(<span class="lme-number">1000</span>);

  mySerial.<span class="lme-function">println</span>(<span class="lme-string">"AT"</span>); <span class="lme-comment">//Once the handshake test is successful, it will back to OK</span>
  <span class="lme-function">updateSerial</span>();

  mySerial.<span class="lme-function">println</span>(<span class="lme-string">"AT+CMGF=1"</span>); <span class="lme-comment">// Configuring TEXT mode</span>
  <span class="lme-function">updateSerial</span>();
  mySerial.<span class="lme-function">println</span>(<span class="lme-string">"AT+CMGS=\"+ZZxxxxxxxxxx\""</span>);<span class="lme-comment">//change ZZ with country code and xxxxxxxxxxx with phone number to sms</span>
  <span class="lme-function">updateSerial</span>();
  mySerial.<span class="lme-function">print</span>(<span class="lme-string">"Last Minute Engineers | lastminuteengineers.com"</span>); <span class="lme-comment">//text content</span>
  <span class="lme-function">updateSerial</span>();
  mySerial.<span class="lme-function">write</span>(<span class="lme-number">26</span>);
}

<span class="lme-keyword">void</span> <span class="lme-function">loop</span>()
{
}

<span class="lme-keyword">void</span> <span class="lme-function">updateSerial</span>()
{
  <span class="lme-function">delay</span>(<span class="lme-number">500</span>);
  <span class="lme-keyword">while</span> (Serial.<span class="lme-function">available</span>()) 
  {
    mySerial.<span class="lme-function">write</span>(Serial.<span class="lme-function">read</span>());<span class="lme-comment">//Forward what Serial received to Software Serial Port</span>
  }
  <span class="lme-keyword">while</span>(mySerial.<span class="lme-function">available</span>()) 
  {
    Serial.<span class="lme-function">write</span>(mySerial.<span class="lme-function">read</span>());<span class="lme-comment">//Forward what Software Serial received to Serial Port</span>
  }
}</code></pre></div></div><p>The sketch is almost same as earlier except below code snippet. Once the connection is established, we send below AT commands:</p><p><strong>AT+CMGF=1</strong> – Selects SMS message format as text. Default format is <a href="https://en.wikipedia.org/wiki/Protocol_data_unit"><strong>P</strong>rotocol <strong>D</strong>ata <strong>U</strong>nit</a> (PDU)</p><p><strong>AT+CMGS=+ZZxxxxxxxxxx</strong>
 – Sends SMS to the phone number specified. The text message entered 
followed by a ‘Ctrl+z’ character is treated as SMS. ‘Ctrl+z’ is actually
 a 26<sup>th</sup> non-printing character described as ‘substitute’ in <a href="https://www.asciitable.com/">ASCII table</a>. So, we need to send 26<sub>DEC</sub> (1A<sub>HEX</sub>) once we send a message.</p><div class="example language-c"><div class="lme-syntax-default"><pre class=" language-c"><span class="ctext" title="Click to Copy"><span class="copied">Copied!</span></span><code class=" language-c">  mySerial.<span class="lme-function">println</span>(<span class="lme-string">"AT+CMGF=1"</span>); <span class="lme-comment">// Configuring TEXT mode</span>
  <span class="lme-function">updateSerial</span>();
  mySerial.<span class="lme-function">println</span>(<span class="lme-string">"AT+CMGS=\"+ZZxxxxxxxxxx\""</span>);<span class="lme-comment">//change ZZ with country code and xxxxxxxxxxx with phone number to sms</span>
  <span class="lme-function">updateSerial</span>();
  mySerial.<span class="lme-function">print</span>(<span class="lme-string">"Last Minute Engineers | lastminuteengineers.com"</span>); <span class="lme-comment">//text content</span>
  <span class="lme-function">updateSerial</span>();
  mySerial.<span class="lme-function">write</span>(<span class="lme-number">26</span>);</code></pre></div></div><p>The
 loop is kept empty as we want to send SMS only once. If you wish to 
send SMS one more time, just hit the RESET key on your Arduino. Below 
screenshot shows SMS sent from SIM800L GSM module.</p><div class="text-align-center"><div class="inline-screenshots"><img class="aligncenter size-full wp-image-672" src="In-Depth%20%20Send%20Receive%20SMS%20&amp;%20Call%20with%20SIM800L%20GSM%20Module%20&amp;%20Arduino_files/SIM800L-GSM-Module-AT-Commands-for-Sending-SMS-on-Arduino.png" alt="SIM800L GSM Module AT Commands for Sending SMS on Arduino" srcset="https://lastminuteengineers.com/wp-content/uploads/2018/08/SIM800L-GSM-Module-AT-Commands-for-Sending-SMS-on-Arduino.png 430w, https://lastminuteengineers.com/wp-content/uploads/2018/08/SIM800L-GSM-Module-AT-Commands-for-Sending-SMS-on-Arduino-300x202.png 300w" sizes="(max-width: 430px) 100vw, 430px" width="430" height="290"></div><div class="inline-screenshots"><img class="aligncenter size-full wp-image-612" src="In-Depth%20%20Send%20Receive%20SMS%20&amp;%20Call%20with%20SIM800L%20GSM%20Module%20&amp;%20Arduino_files/Sending-SMS-through-SIM800L-GSM-Module.png" alt="Sending SMS through SIM800L GSM Module" srcset="https://lastminuteengineers.com/wp-content/uploads/2018/07/Sending-SMS-through-SIM800L-GSM-Module.png 260w, https://lastminuteengineers.com/wp-content/uploads/2018/07/Sending-SMS-through-SIM800L-GSM-Module-169x300.png 169w, https://lastminuteengineers.com/wp-content/uploads/2018/07/Sending-SMS-through-SIM800L-GSM-Module-236x420.png 236w" sizes="(max-width: 260px) 100vw, 260px" width="260" height="462"></div></div><h2 id="arduino-code-reading-sms">Arduino Code – Reading SMS<a href="#arduino-code-reading-sms" class="hlink"></a></h2><p>Now
 let’s program our Arduino to read incoming messages. This sketch is 
very useful when you need to trigger an action when a specific SMS is 
received. For example, when the Arduino receives an SMS, you can 
instruct it to turn on or off a relay. You got the idea!</p><div class="example language-c"><div class="lme-syntax-default"><pre class=" language-c"><span class="ctext" title="Click to Copy"><span class="copied">Copied!</span></span><code class=" language-c">#include <span class="lme-string">&lt;SoftwareSerial.h&gt;</span>

<span class="lme-comment">//Create software serial object to communicate with SIM800L</span>
SoftwareSerial <span class="lme-function">mySerial</span>(<span class="lme-number">3</span>, <span class="lme-number">2</span>); <span class="lme-comment">//SIM800L Tx &amp; Rx is connected to Arduino #3 &amp; #2</span>

<span class="lme-keyword">void</span> <span class="lme-function">setup</span>()
{
  <span class="lme-comment">//Begin serial communication with Arduino and Arduino IDE (Serial Monitor)</span>
  Serial.<span class="lme-function">begin</span>(<span class="lme-number">9600</span>);
  
  <span class="lme-comment">//Begin serial communication with Arduino and SIM800L</span>
  mySerial.<span class="lme-function">begin</span>(<span class="lme-number">9600</span>);

  Serial.<span class="lme-function">println</span>(<span class="lme-string">"Initializing..."</span>); 
  <span class="lme-function">delay</span>(<span class="lme-number">1000</span>);

  mySerial.<span class="lme-function">println</span>(<span class="lme-string">"AT"</span>); <span class="lme-comment">//Once the handshake test is successful, it will back to OK</span>
  <span class="lme-function">updateSerial</span>();
  
  mySerial.<span class="lme-function">println</span>(<span class="lme-string">"AT+CMGF=1"</span>); <span class="lme-comment">// Configuring TEXT mode</span>
  <span class="lme-function">updateSerial</span>();
  mySerial.<span class="lme-function">println</span>(<span class="lme-string">"AT+CNMI=1,2,0,0,0"</span>); <span class="lme-comment">// Decides how newly arrived SMS messages should be handled</span>
  <span class="lme-function">updateSerial</span>();
}

<span class="lme-keyword">void</span> <span class="lme-function">loop</span>()
{
  <span class="lme-function">updateSerial</span>();
}

<span class="lme-keyword">void</span> <span class="lme-function">updateSerial</span>()
{
  <span class="lme-function">delay</span>(<span class="lme-number">500</span>);
  <span class="lme-keyword">while</span> (Serial.<span class="lme-function">available</span>()) 
  {
    mySerial.<span class="lme-function">write</span>(Serial.<span class="lme-function">read</span>());<span class="lme-comment">//Forward what Serial received to Software Serial Port</span>
  }
  <span class="lme-keyword">while</span>(mySerial.<span class="lme-function">available</span>()) 
  {
    Serial.<span class="lme-function">write</span>(mySerial.<span class="lme-function">read</span>());<span class="lme-comment">//Forward what Software Serial received to Serial Port</span>
  }
}</code></pre></div></div><p>The sketch is similar as earlier except below code snippet. Once the connection is established, we send below AT commands:</p><p><strong>AT+CMGF=1</strong> – Selects SMS message format as text. Default format is <strong>P</strong>rotocol <strong>D</strong>ata <strong>U</strong>nit (PDU)</p><p><strong>AT+CNMI=1,2,0,0,0</strong>
 – specifies how newly arrived SMS messages should be handled. This way 
you can tell the SIM800L module either to forward newly arrived SMS 
messages directly to the PC, or to save them in message storage and then
 notify the PC about their locations in message storage.</p><p>Its response starts with <strong>+CMT:</strong>
 All the fields in the response are comma-separated with first field 
being phone number. The second field is the name of person sending SMS. 
Third field is a timestamp while forth field is the actual message.</p><div class="example language-c"><div class="lme-syntax-default"><pre class=" language-c"><span class="ctext" title="Click to Copy"><span class="copied">Copied!</span></span><code class=" language-c">  mySerial.<span class="lme-function">println</span>(<span class="lme-string">"AT+CMGF=1"</span>); <span class="lme-comment">// Configuring TEXT mode</span>
  <span class="lme-function">updateSerial</span>();
  mySerial.<span class="lme-function">println</span>(<span class="lme-string">"AT+CNMI=1,2,0,0,0"</span>); <span class="lme-comment">// Decides how newly arrived SMS messages should be handled</span>
  <span class="lme-function">updateSerial</span>();</code></pre></div></div><p>Note that <strong>this time we have NOT kept the loop function empty</strong>
 as we are polling for newly arrived SMS messages. Once you send the SMS
 to SIM800L GSM module, you will see below output on serial monitor.</p><div class="text-align-center"><div class="inline-screenshots"><img class="aligncenter size-full wp-image-610" src="In-Depth%20%20Send%20Receive%20SMS%20&amp;%20Call%20with%20SIM800L%20GSM%20Module%20&amp;%20Arduino_files/Reading-SMS-through-SIM800L-GSM-Module.png" alt="Reading SMS through SIM800L GSM Module" srcset="https://lastminuteengineers.com/wp-content/uploads/2018/07/Reading-SMS-through-SIM800L-GSM-Module.png 260w, https://lastminuteengineers.com/wp-content/uploads/2018/07/Reading-SMS-through-SIM800L-GSM-Module-169x300.png 169w, https://lastminuteengineers.com/wp-content/uploads/2018/07/Reading-SMS-through-SIM800L-GSM-Module-236x420.png 236w" sizes="(max-width: 260px) 100vw, 260px" width="260" height="462"></div><div class="inline-screenshots"><img class="aligncenter size-full wp-image-670" src="In-Depth%20%20Send%20Receive%20SMS%20&amp;%20Call%20with%20SIM800L%20GSM%20Module%20&amp;%20Arduino_files/SIM800L-GSM-Module-AT-Commands-for-Reading-SMS-on-Arduino.png" alt="SIM800L GSM Module AT Commands for Reading SMS on Arduino" srcset="https://lastminuteengineers.com/wp-content/uploads/2018/08/SIM800L-GSM-Module-AT-Commands-for-Reading-SMS-on-Arduino.png 430w, https://lastminuteengineers.com/wp-content/uploads/2018/08/SIM800L-GSM-Module-AT-Commands-for-Reading-SMS-on-Arduino-300x231.png 300w" sizes="(max-width: 430px) 100vw, 430px" width="430" height="331"></div></div><h3 id="expanding-arduino-softwareserial-buffer-size">Expanding Arduino SoftwareSerial Buffer Size</h3><p>If
 your message is long enough just like ours, then you’ll probably 
receive it with some missing characters. This is not because of a faulty
 code. Your SoftwareSerial receive buffer is getting filled up and 
discarding characters. You are not reading fast enough from the buffer.</p><p>The
 simplest solution to this is to increase the size of the SoftwareSerial
 buffer from its default size of 64 bytes to 256 bytes (or smaller, 
depending on what works for you).</p><p>On a Windows PC, go to 
C:\Program Files (x86) -&gt; Arduino -&gt; hardware -&gt; Arduino -&gt; 
avr -&gt; libraries -&gt; SoftwareSerial (-&gt; src for newer version of
 Arduino IDE) Open SoftwareSerial.h and change the line:</p><div class="example language-c"><div class="lme-syntax-default"><pre class=" language-c"><span class="ctext" title="Click to Copy"><span class="copied">Copied!</span></span><code class=" language-c"><span class="lme-comment">// RX buffer size</span>
#define _SS_MAX_RX_BUFF 64</code></pre></div></div><p>to</p><div class="example language-c"><div class="lme-syntax-default"><pre class=" language-c"><span class="ctext" title="Click to Copy"><span class="copied">Copied!</span></span><code class=" language-c"><span class="lme-comment">// RX buffer size</span>
#define _SS_MAX_RX_BUFF 256</code></pre></div></div><p>Save the file and try your sketch again.</p><figure id="attachment_618" aria-describedby="caption-attachment-618" style="width: 578px" class="wp-caption aligncenter"><img class="size-full wp-image-618" src="In-Depth%20%20Send%20Receive%20SMS%20&amp;%20Call%20with%20SIM800L%20GSM%20Module%20&amp;%20Arduino_files/Expanding-Arduino-SoftwareSerial-Buffer-Size.png" alt="Expanding Arduino SoftwareSerial Buffer Size" srcset="https://lastminuteengineers.com/wp-content/uploads/2018/07/Expanding-Arduino-SoftwareSerial-Buffer-Size.png 578w, https://lastminuteengineers.com/wp-content/uploads/2018/07/Expanding-Arduino-SoftwareSerial-Buffer-Size-300x267.png 300w, https://lastminuteengineers.com/wp-content/uploads/2018/07/Expanding-Arduino-SoftwareSerial-Buffer-Size-472x420.png 472w" sizes="(max-width: 578px) 100vw, 578px" width="578" height="514"><figcaption id="caption-attachment-618" class="wp-caption-text">Expanding Arduino SoftwareSerial Buffer Size</figcaption></figure><h2 id="arduino-code-making-call">Arduino Code – Making Call<a href="#arduino-code-making-call" class="hlink"></a></h2><p>Now
 let’s program our Arduino to make call. This sketch is very useful when
 you want your Arduino to make an SOS/distress call in case of emergency
 like temperature being exceeded or someone breaks into your house. You 
got the idea!</p><p>Before trying the sketch out, you need to enter the 
phone number. Search for the string ZZxxxxxxxxxx and replace ZZ with 
county code and xxxxxxxxxx with the 10 digit phone number.</p><div class="example language-c"><div class="lme-syntax-default"><pre class=" language-c"><span class="ctext" title="Click to Copy"><span class="copied">Copied!</span></span><code class=" language-c">#include <span class="lme-string">&lt;SoftwareSerial.h&gt;</span>

<span class="lme-comment">//Create software serial object to communicate with SIM800L</span>
SoftwareSerial <span class="lme-function">mySerial</span>(<span class="lme-number">3</span>, <span class="lme-number">2</span>); <span class="lme-comment">//SIM800L Tx &amp; Rx is connected to Arduino #3 &amp; #2</span>

<span class="lme-keyword">void</span> <span class="lme-function">setup</span>()
{
  <span class="lme-comment">//Begin serial communication with Arduino and Arduino IDE (Serial Monitor)</span>
  Serial.<span class="lme-function">begin</span>(<span class="lme-number">9600</span>);
  
  <span class="lme-comment">//Begin serial communication with Arduino and SIM800L</span>
  mySerial.<span class="lme-function">begin</span>(<span class="lme-number">9600</span>);

  Serial.<span class="lme-function">println</span>(<span class="lme-string">"Initializing..."</span>); 
  <span class="lme-function">delay</span>(<span class="lme-number">1000</span>);

  mySerial.<span class="lme-function">println</span>(<span class="lme-string">"AT"</span>); <span class="lme-comment">//Once the handshake test is successful, i t will back to OK</span>
  <span class="lme-function">updateSerial</span>();
  
  mySerial.<span class="lme-function">println</span>(<span class="lme-string">"ATD+ +ZZxxxxxxxxxx;"</span>); <span class="lme-comment">//  change ZZ with country code and xxxxxxxxxxx with phone number to dial</span>
  <span class="lme-function">updateSerial</span>();
  <span class="lme-function">delay</span>(<span class="lme-number">20000</span>); <span class="lme-comment">// wait for 20 seconds...</span>
  mySerial.<span class="lme-function">println</span>(<span class="lme-string">"ATH"</span>); <span class="lme-comment">//hang up</span>
  <span class="lme-function">updateSerial</span>();
}

<span class="lme-keyword">void</span> <span class="lme-function">loop</span>()
{
}

<span class="lme-keyword">void</span> <span class="lme-function">updateSerial</span>()
{
  <span class="lme-function">delay</span>(<span class="lme-number">500</span>);
  <span class="lme-keyword">while</span> (Serial.<span class="lme-function">available</span>()) 
  {
    mySerial.<span class="lme-function">write</span>(Serial.<span class="lme-function">read</span>());<span class="lme-comment">//Forward what Serial received to Software Serial Port</span>
  }
  <span class="lme-keyword">while</span>(mySerial.<span class="lme-function">available</span>()) 
  {
    Serial.<span class="lme-function">write</span>(mySerial.<span class="lme-function">read</span>());<span class="lme-comment">//Forward what Software Serial received to Serial Port</span>
  }
}</code></pre></div></div><p>To place a call following AT commands are used:</p><p><strong>ATD+ +ZZxxxxxxxxxx;</strong>
 – Dials a specified number. The&nbsp;semicolon&nbsp;(;) modifier at the
 end separates the dial string into multiple dial&nbsp;commands. All but
 the last&nbsp;command&nbsp;must end with the semicolon&nbsp;(;) 
modifier.</p><p><strong>ATH</strong> – Hangs up the call</p><div class="example language-c"><div class="lme-syntax-default"><pre class=" language-c"><span class="ctext" title="Click to Copy"><span class="copied">Copied!</span></span><code class=" language-c">  mySerial.<span class="lme-function">println</span>(<span class="lme-string">"ATD+ +ZZxxxxxxxxxx;"</span>); <span class="lme-comment">//  change ZZ with country code and xxxxxxxxxxx with phone number to dial</span>
  <span class="lme-function">updateSerial</span>();
  <span class="lme-function">delay</span>(<span class="lme-number">20000</span>); <span class="lme-comment">// wait for 20 seconds...</span>
  mySerial.<span class="lme-function">println</span>(<span class="lme-string">"ATH"</span>); <span class="lme-comment">//hang up</span>
  <span class="lme-function">updateSerial</span>();</code></pre></div></div><p>Below screenshot shows call made from SIM800L GSM module.</p><div class="text-align-center"><div class="inline-screenshots"><img class="aligncenter size-full wp-image-669" src="In-Depth%20%20Send%20Receive%20SMS%20&amp;%20Call%20with%20SIM800L%20GSM%20Module%20&amp;%20Arduino_files/SIM800L-GSM-Module-AT-Commands-for-Making-Call-on-Arduino.png" alt="SIM800L GSM Module AT Commands for Making Call on Arduino" srcset="https://lastminuteengineers.com/wp-content/uploads/2018/08/SIM800L-GSM-Module-AT-Commands-for-Making-Call-on-Arduino.png 430w, https://lastminuteengineers.com/wp-content/uploads/2018/08/SIM800L-GSM-Module-AT-Commands-for-Making-Call-on-Arduino-300x186.png 300w, https://lastminuteengineers.com/wp-content/uploads/2018/08/SIM800L-GSM-Module-AT-Commands-for-Making-Call-on-Arduino-356x220.png 356w" sizes="(max-width: 430px) 100vw, 430px" width="430" height="267"></div><div class="inline-screenshots"><img class="aligncenter wp-image-611 size-full" src="In-Depth%20%20Send%20Receive%20SMS%20&amp;%20Call%20with%20SIM800L%20GSM%20Module%20&amp;%20Arduino_files/Receiving-Call-through-SIM800L-GSM-Module.jpg" alt="Calling through SIM800L GSM Module" srcset="https://lastminuteengineers.com/wp-content/uploads/2018/07/Receiving-Call-through-SIM800L-GSM-Module.jpg 260w, https://lastminuteengineers.com/wp-content/uploads/2018/07/Receiving-Call-through-SIM800L-GSM-Module-169x300.jpg 169w, https://lastminuteengineers.com/wp-content/uploads/2018/07/Receiving-Call-through-SIM800L-GSM-Module-236x420.jpg 236w" sizes="(max-width: 260px) 100vw, 260px" width="260" height="462"></div></div><h2 id="arduino-code-receiving-call">Arduino Code – Receiving Call<a href="#arduino-code-receiving-call" class="hlink"></a></h2><p>Receiving
 call doesn’t require any special code; you just have to keep listening 
to the SIM800L module. Yet, you may find this sketch very useful, when 
you need to trigger an action when a call from specific phone number is 
received.</p><div class="example language-c"><div class="lme-syntax-default"><pre class=" language-c"><span class="ctext" title="Click to Copy"><span class="copied">Copied!</span></span><code class=" language-c">#include <span class="lme-string">&lt;SoftwareSerial.h&gt;</span>

<span class="lme-comment">//Create software serial object to communicate with SIM800L</span>
SoftwareSerial <span class="lme-function">mySerial</span>(<span class="lme-number">3</span>, <span class="lme-number">2</span>); <span class="lme-comment">//SIM800L Tx &amp; Rx is connected to Arduino #3 &amp; #2</span>

<span class="lme-keyword">void</span> <span class="lme-function">setup</span>()
{
  <span class="lme-comment">//Begin serial communication with Arduino and Arduino IDE (Serial Monitor)</span>
  Serial.<span class="lme-function">begin</span>(<span class="lme-number">9600</span>);
  
  <span class="lme-comment">//Begin serial communication with Arduino and SIM800L</span>
  mySerial.<span class="lme-function">begin</span>(<span class="lme-number">9600</span>);

  Serial.<span class="lme-function">println</span>(<span class="lme-string">"Initializing..."</span>); 
}

<span class="lme-keyword">void</span> <span class="lme-function">loop</span>()
{
  <span class="lme-function">updateSerial</span>();
}

<span class="lme-keyword">void</span> <span class="lme-function">updateSerial</span>()
{
  <span class="lme-function">delay</span>(<span class="lme-number">500</span>);
  <span class="lme-keyword">while</span> (Serial.<span class="lme-function">available</span>()) 
  {
    mySerial.<span class="lme-function">write</span>(Serial.<span class="lme-function">read</span>());<span class="lme-comment">//Forward what Serial received to Software Serial Port</span>
  }
  <span class="lme-keyword">while</span>(mySerial.<span class="lme-function">available</span>()) 
  {
    Serial.<span class="lme-function">write</span>(mySerial.<span class="lme-function">read</span>());<span class="lme-comment">//Forward what Software Serial received to Serial Port</span>
  }
}</code></pre></div></div><p>Incoming call is usually indicated by 
‘RING’ on serial monitor followed by phone number and caller ID. To 
accept/hang a call following AT commands are used:</p><p><strong>ATA</strong> – Accepts incoming call.</p><p><strong>ATH</strong> – Hangs up the call. On hanging up the call it sends NO CARRIER on the serial monitor indicating call couldn’t connect.</p><p>Below output on serial monitor shows call received by SIM800L GSM module.</p><div class="text-align-center"><div class="inline-screenshots"><img class="aligncenter wp-image-608 size-full" src="In-Depth%20%20Send%20Receive%20SMS%20&amp;%20Call%20with%20SIM800L%20GSM%20Module%20&amp;%20Arduino_files/Calling-through-SIM800L-GSM-Module.jpg" alt="Receiving Call on SIM800L GSM Module" srcset="https://lastminuteengineers.com/wp-content/uploads/2018/07/Calling-through-SIM800L-GSM-Module.jpg 260w, https://lastminuteengineers.com/wp-content/uploads/2018/07/Calling-through-SIM800L-GSM-Module-169x300.jpg 169w, https://lastminuteengineers.com/wp-content/uploads/2018/07/Calling-through-SIM800L-GSM-Module-236x420.jpg 236w" sizes="(max-width: 260px) 100vw, 260px" width="260" height="462"></div><div class="inline-screenshots"><img class="aligncenter size-full wp-image-671" src="In-Depth%20%20Send%20Receive%20SMS%20&amp;%20Call%20with%20SIM800L%20GSM%20Module%20&amp;%20Arduino_files/SIM800L-GSM-Module-AT-Commands-for-Receiving-Call-on-Arduino.png" alt="SIM800L GSM Module AT Commands for Receiving Call on Arduino" srcset="https://lastminuteengineers.com/wp-content/uploads/2018/08/SIM800L-GSM-Module-AT-Commands-for-Receiving-Call-on-Arduino.png 431w, https://lastminuteengineers.com/wp-content/uploads/2018/08/SIM800L-GSM-Module-AT-Commands-for-Receiving-Call-on-Arduino-300x190.png 300w" sizes="(max-width: 431px) 100vw, 431px" width="431" height="273"></div></div></div></article><div class="social-sharing bottom-sharing"><div class="share-text-wrap"><div class="share-icon"> <svg xmlns="http://www.w3.org/2000/svg" width="12" height="13" viewBox="-0.4 -0.3 12 13"><path fill="#444" d="M1.6 8.2c.6 0 1-.2 1.4-.6l4.6 2.7v.5c0 1 .8 2 1.9 2a2 2 0 0 0 2-2 2 2 0 0 0-2-2c-.5 0-1 .2-1.3.5L3.5 6.6l.1-.4v-.5L8.1 3c.3.3.8.5 1.3.5a1.9 1.9 0 1 0-2-1.9c0 .2 0 .3.2.5L3 4.8c-.3-.3-.8-.5-1.3-.5a2 2 0 0 0-2 2c0 1 .8 1.9 2 1.9z"></path></svg></div><div class="share-text">Share</div></div> <a class="facebook" href="https://www.facebook.com/sharer.php?u=https%3A%2F%2Flastminuteengineers.com%2Fsim800l-gsm-module-arduino-tutorial%2F" title="Share on facebook"> <svg xmlns="http://www.w3.org/2000/svg" width="6.971" height="15"><path fill="#ffffff" d="M6.972 4.857H4.595V3.301c0-.584.389-.722.662-.722h1.674V.009L4.622 0c-2.56 0-3.141 1.917-3.141 3.145v1.712H0v2.647h1.481V15h3.116V7.506h2.102l.273-2.649z"></path></svg> </a> <a class="twitter" href="https://twitter.com/intent/tweet?text=Send+Receive+SMS+%26+Call+with+SIM800L+GSM+Module+%26+Arduino&amp;url=https%3A%2F%2Flastminuteengineers.com%2Fsim800l-gsm-module-arduino-tutorial%2F&amp;via=Last+Minute+Engineers" title="Share on twitter"> <svg xmlns="http://www.w3.org/2000/svg" width="16" height="13"><path fill="#ffffff" d="M16 1.539a6.548 6.548 0 0 1-1.885.518A3.293 3.293 0 0 0 15.558.242a6.646 6.646 0 0 1-2.086.797A3.274 3.274 0 0 0 11.077.003a3.283 3.283 0 0 0-3.201 4.029A9.315 9.315 0 0 1 1.113.601a3.281 3.281 0 0 0 1.014 4.382 3.23 3.23 0 0 1-1.484-.411v.042a3.282 3.282 0 0 0 2.633 3.218 3.344 3.344 0 0 1-1.483.056 3.286 3.286 0 0 0 3.064 2.279 6.583 6.583 0 0 1-4.076 1.402c-.264 0-.523-.014-.781-.045A9.278 9.278 0 0 0 5.031 13c6.037 0 9.34-5 9.34-9.338 0-.143-.004-.283-.01-.424A6.602 6.602 0 0 0 16 1.539z"></path></svg> </a> <a class="pinterest" href="https://pinterest.com/pin/create/button/?url=https://lastminuteengineers.com/sim800l-gsm-module-arduino-tutorial/&amp;media=https://lastminuteengineers.com/wp-content/uploads/2018/07/Arduino-Project-Working-Interfacing-SIM800L-GSM-Module-Sending-Receiving-SMS-Making-Call.jpg&amp;description=Send+Receive+SMS+%26+Call+with+SIM800L+GSM+Module+%26+Arduino" title="Share on pinterest"> <svg xmlns="http://www.w3.org/2000/svg" width="10.84" height="14"><path fill="#ffffff" d="M5.747 0C1.927 0 .001 2.736.001 5.021c0 1.382.523 2.614 1.645 3.073.185.076.351.004.402-.2.039-.141.125-.498.164-.645.053-.202.033-.272-.115-.448-.323-.383-.532-.877-.532-1.576 0-2.032 1.52-3.853 3.959-3.853 2.158 0 3.344 1.317 3.344 3.082 0 2.317-1.025 4.274-2.547 4.274-.844 0-1.473-.696-1.27-1.55.242-1.02.709-2.118.709-2.854 0-.657-.352-1.206-1.082-1.206-.861 0-1.553.89-1.553 2.081 0 .759.258 1.272.258 1.272L2.35 10.853c-.307 1.301-.045 2.896-.023 3.057.014.097.137.118.191.047.08-.104 1.104-1.368 1.451-2.633.1-.355.566-2.211.566-2.211.279.532 1.096 1.001 1.965 1.001 2.584 0 4.338-2.355 4.338-5.511C10.839 2.222 8.817 0 5.747 0z"></path></svg> </a></div></div><nav class="nav-rightbar-wrapper"><div class="nav-rightbar"><div class="story-highlights"><div class="tab"><label for="tab-title" class="story-highlights-title">Table Of Contents</label><input id="tab-title" type="checkbox" name="tabs"><label class="main-tab-icon tabicon" for="tab-title"></label><ul class="main-tab tab-content"><li><a href="#hardware-overview-of-sim800l-gsmgprs-module">Hardware Overview</a></li><li><a href="#led-status-indicators">LED Status Indicators</a></li><li><a href="#selecting-antenna">Selecting Antenna</a></li><li class="tab"><a href="#supplying-power-for-sim800l-module">Supplying Power for SIM800L module</a><input id="tab-5" type="checkbox" name="tabs"><label class="tabicon" for="tab-5"></label><ul class="tab-content"><li><a href="#37v-lipo-battery-recommended">- 37v LiPo Battery Recommended</a></li><li><a href="#dcdc-buck-converter">- DCDC Buck Converter</a></li></ul></li><li><a href="#sim800l-gsm-module-pinout">SIM800L GSM Module Pinout</a></li><li><a href="#wiring-sim800l-gsm-module-to-arduino-uno">Wiring SIM800L GSM module to Arduino UNO</a></li><li><a href="#arduino-code-testing-at-commands">Testing AT Commands</a></li><li><a href="#arduino-code-sending-sms">Sending SMS</a></li><li class="tab"><a href="#arduino-code-reading-sms">Reading SMS</a><input id="tab-12" type="checkbox" name="tabs"><label class="tabicon" for="tab-12"></label><ul class="tab-content"><li><a href="#expanding-arduino-softwareserial-buffer-size">- Expanding Arduino SoftwareSerial Buffer Size</a></li></ul></li><li><a href="#arduino-code-making-call">Making Call</a></li><li><a href="#arduino-code-receiving-call">Receiving Call</a></li></ul></div></div></div></nav></div></main></section><style type="text/css" media="screen">.margin-top-bottom-40{margin-top:40px;margin-bottom:40px}.margin-bottom-0{margin-bottom:0}.side-by-side1,.side-by-side2,.side-by-side3{display:table-cell;vertical-align:top;text-align:center;width:33%;padding:0px 20px 0px 0}.side-by-side2,.side-by-side3{width:32%;padding:0px 15px 0px}.side-by-side3{width:34%;padding:0px 0 0px 20px}.side-by-side b{display:block}@media (max-width:500px){.side-by-side{display:block;width:auto}}.text-align-center{text-align:center}.inline-screenshots{display:inline-block;margin:auto 5px;vertical-align:middle}.amp-mode-mouse .inline-screenshots{display:block;margin:20px auto}.XWKKY{margin-bottom:20px;caption-side:top;margin-top:10px}.XWKKY caption{margin-bottom:15px}.tabler tr.adjuster1{background:#fff}.tabler tr.adjuster2{background:#f6f6f6}</style> <script type="text/javascript">window.onload=function(){function e(){var e=jQuery(".post").offset().top,r=jQuery(".post").offset().top+jQuery(".post").height(),n=jQuery(window).height(),o=jQuery(window).scrollTop()
e>o?(jQuery(".nav-sidebar").removeClass("scrolling-end"),jQuery(".nav-sidebar").removeClass("scrolling")):o+n>r?(jQuery(".nav-sidebar").addClass("scrolling-end"),jQuery(".nav-sidebar").removeClass("scrolling")):(jQuery(".nav-sidebar").addClass("scrolling"),jQuery(".nav-sidebar").removeClass("scrolling-end"))}e(),window.onscroll=function(){e()},jQuery("#chapters a").each(function(){jQuery(this).attr("href").includes(window.location.pathname)&&(jQuery(this).addClass("current-chapter"),jQuery(".nav-section").hide(),jQuery(this).parent("div").show(),jQuery("#nav-sidebar").scrollTop(jQuery("#nav-sidebar").scrollTop()+jQuery(this).parent("div").prev().position().top))}),jQuery(".nav-title").on("click",function(){jQuery(".nav-section").hide(),jQuery(this).next().show(),jQuery("#nav-sidebar").scrollTop(jQuery("#nav-sidebar").scrollTop()+jQuery(this).position().top)}),jQuery("h2").each(function(){jQuery(this).append('<a href="#'+jQuery(this).attr("id")+'" class="hlink"></a>')}),jQuery(".excode pre").each(function(){jQuery(this).prepend('<span class="ctext" title="Click to Copy"><span class="copied">Copied!</span></span>')}),jQuery("pre.language-c").each(function(){jQuery(this).prepend('<span class="ctext" title="Click to Copy"><span class="copied">Copied!</span></span>')}),jQuery(".ctext").on("click",function(){var e=document.createElement("textarea")
document.body.appendChild(e),e.value=jQuery(this).next().text(),e.select(),document.execCommand("copy",!1),e.remove(),jQuery(this).children(".copied").show().fadeOut(800)})}</script> </div><footer id="colophon" class="site-footer"><div class="container"><ul class="footer-menu"><li><a href="https://lastminuteengineers.com/disclaimer/">Disclaimer</a></li><li><a href="https://lastminuteengineers.com/privacy-policy/">Privacy Policy</a></li><li class="invisi"><a href="https://lastminuteengineers.com/contact/">Contact Us</a></li></ul><div class="copyright">Copyright © 2019 LastMinuteEngineers.com. All rights reserved.</div></div></footer></div><link href="In-Depth%20%20Send%20Receive%20SMS%20&amp;%20Call%20with%20SIM800L%20GSM%20Module%20&amp;%20Arduino_files/css.css" rel="stylesheet"><script type="text/javascript" src="In-Depth%20%20Send%20Receive%20SMS%20&amp;%20Call%20with%20SIM800L%20GSM%20Module%20&amp;%20Arduino_files/jquery.js"></script> <script>/(trident|msie)/i.test(navigator.userAgent)&&document.getElementById&&window.addEventListener&&window.addEventListener("hashchange",function(){var t,e=location.hash.substring(1);/^[A-z0-9_-]+$/.test(e)&&(t=document.getElementById(e))&&(/^(?:a|select|input|button|textarea)$/i.test(t.tagName)||(t.tabIndex=-1),t.focus())},!1);</script> <table style="width: 215px; display: none; top: 37px; left: 1302px; position: absolute;" class="gstl_50 gssb_c" cellspacing="0" cellpadding="0"><tbody><tr><td class="gssb_f"></td><td class="gssb_e" style="width: 100%;"></td></tr></tbody></table></body></html>